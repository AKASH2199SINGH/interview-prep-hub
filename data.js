// --- CONTENT SECTION ---
// This is the complete and corrected list of all questions and answers.
const interviewData = {
    "C": [
        { "q": "What is C language?", "a": "C is a general-purpose, procedural programming language developed by Dennis Ritchie at Bell Labs. It’s known as the “mother of all languages” because many modern languages like C++, Java, and Python are based on it." },
        { "q": "What are the main features of C?", "a": "<ul><li>Simple and efficient</li><li>Portable</li><li>Supports low-level memory access</li><li>Structured programming</li><li>Fast execution</li></ul>" },
        { "q": "What are the data types in C?", "a": "<ul><li><strong>Basic:</strong> int, char, float, double</li><li><strong>Derived:</strong> array, pointer, structure, union</li><li><strong>Enumeration:</strong> enum</li><li><strong>Void:</strong> for no return type</li></ul>" },
        { "q": "What is the difference between variable declaration and definition?", "a": "<ul><li><strong>Declaration:</strong> Tells the compiler about the variable type (e.g., <code>extern int x;</code>)</li><li><strong>Definition:</strong> Allocates memory for the variable (e.g., <code>int x = 10;</code>)</li></ul>" },
        { "q": "What are storage classes in C?", "a": "<ul><li><strong>auto:</strong> The default for local variables.</li><li><strong>static:</strong> Retains the variable's value between function calls.</li><li><strong>extern:</strong> Declares a global variable that is defined elsewhere.</li><li><strong>register:</strong> Stores the variable in a CPU register for faster access.</li></ul>" },
        { "q": "What is the difference between printf() and scanf()?", "a": "<code>printf()</code> is used to display output on the console, while <code>scanf()</code> is used to take formatted input from the user." },
        { "q": "What is the difference between local and global variables?", "a": "<ul><li><strong>Local Variables:</strong> Declared inside a function and are only accessible within that function.</li><li><strong>Global Variables:</strong> Declared outside all functions and are accessible from any function in the program.</li></ul>" },
        { "q": "What is recursion?", "a": "Recursion is a process where a function calls itself, either directly or indirectly. A base condition is necessary to stop the recursion. A common example is calculating a factorial." },
        { "q": "What is the use of the static keyword?", "a": "When applied to a local variable, <code>static</code> makes it retain its value between function calls. When applied to a global variable or function, it limits its scope to the file in which it is declared." },
        { "q": "What is a pointer in C?", "a": "A pointer is a variable that stores the memory address of another variable. Example: <pre><code>int a = 10;\\nint *p = &a;</code></pre>" },
        { "q": "What is a NULL pointer?", "a": "A NULL pointer is a pointer that does not point to any memory location. It's a special value used to indicate that the pointer is not intended to point to an accessible memory location. Example: <code>int *p = NULL;</code>" },
        { "q": "What is the difference between malloc() and calloc()?", "a": "<table class='custom-table'><thead><tr><th>Function</th><th>Initialization</th><th>Usage</th></tr></thead><tbody><tr><td>malloc()</td><td>Doesn’t initialize memory</td><td>malloc(size)</td></tr><tr><td>calloc()</td><td>Initializes memory to zero</td><td>calloc(n, size)</td></tr></tbody></table>" },
        { "q": "What is the purpose of the free() function?", "a": "The <code>free()</code> function is used to deallocate memory that was previously allocated by <code>malloc()</code>, <code>calloc()</code>, or <code>realloc()</code>, returning it to the heap." },
        { "q": "What is a dangling pointer?", "a": "A dangling pointer is a pointer that points to a memory location that has been freed or deallocated. Accessing it can lead to undefined behavior." },
        { "q": "What is the difference between == and =?", "a": "<code>=</code> is the assignment operator, used to assign a value to a variable. <code>==</code> is the equality operator, used to compare two values." },
        { "q": "What is the use of the sizeof operator?", "a": "The <code>sizeof</code> operator returns the size, in bytes, of a variable or a data type. Example: <code>printf(\\\"%zu\\\", sizeof(int));</code>" },
        { "q": "What are arrays in C?", "a": "An array is a collection of elements of the same data type stored in contiguous memory locations. Example: <code>int arr[5] = {1, 2, 3, 4, 5};</code>" },
        { "q": "What is the difference between an array and a pointer?", "a": "An array is a collection of elements, while a pointer is a variable that stores a memory address. An array name itself acts like a constant pointer to its first element, but it cannot be reassigned." },
        { "q": "What is a function in C?", "a": "A function is a self-contained block of code that performs a specific task. It can be called from other parts of the program, promoting code reusability and modularity." },
        { "q": "What is the difference between call by value and call by reference?", "a": "<ul><li><strong>Call by value:</strong> A copy of the argument's value is passed to the function. Changes made inside the function do not affect the original variable.</li><li><strong>Call by reference:</strong> The memory address of the argument is passed. Changes made inside the function will affect the original variable.</li></ul>" },
        { "q": "What is the difference between break and continue?", "a": "<code>break</code> is used to exit a loop (for, while, do-while) or a switch statement immediately. <code>continue</code> skips the current iteration of a loop and proceeds to the next one." },
        { "q": "What is a structure in C?", "a": "A structure is a user-defined data type that allows you to group together variables of different data types under a single name. Example: <pre><code>struct Student {\\n    char name[50];\\n    int age;\\n};</code></pre>" },
        { "q": "What is a union?", "a": "A union is similar to a structure, but all its members share the same memory location. Only one member can hold a value at any given time. It is used for memory optimization." },
        { "q": "What is the difference between a structure and a union?", "a": "<table class='custom-table'><thead><tr><th>Structure</th><th>Union</th></tr></thead><tbody><tr><td>Each member has separate memory</td><td>Members share same memory</td></tr><tr><td>All members active</td><td>Only one active at a time</td></tr></tbody></table>" },
        { "q": "What is an enum?", "a": "An enumeration (enum) is a user-defined data type that consists of a set of named integer constants, making the code more readable. Example: <code>enum Days { Sun, Mon, Tue };</code>" },
        { "q": "What is the difference between for, while, and do-while loops?", "a": "<ul><li><strong>for:</strong> Used when the number of iterations is known. Initialization, condition, and update are in one line.</li><li><strong>while:</strong> An entry-controlled loop. The condition is checked before executing the loop body.</li><li><strong>do-while:</strong> An exit-controlled loop. The loop body is executed at least once before the condition is checked.</li></ul>" },
        { "q": "What are preprocessor directives?", "a": "Preprocessor directives are commands that are processed by the C preprocessor before the program is compiled. They start with a <code>#</code> symbol. Examples include <code>#include</code>, <code>#define</code>, and <code>#ifdef</code>." },
        { "q": "What is the difference between #include <file.h> and #include \\\"file.h\\\"?", "a": "<code>&lt;file.h&gt;</code> tells the preprocessor to look for the file in the standard system directories. <code>\\\"file.h\\\"</code> tells it to look in the current directory first, and then in the standard system directories." },
        { "q": "What is the purpose of typedef?", "a": "<code>typedef</code> is used to create an alias or a new name for an existing data type. It can improve code readability. Example: <code>typedef unsigned int uint;</code>" },
        { "q": "What is a header file?", "a": "A header file (with a .h extension) contains C function declarations and macro definitions to be shared between several source files. Example: <code>stdio.h</code>, <code>math.h</code>." },
        { "q": "What is file handling in C?", "a": "File handling in C allows a program to read from and write to files on the disk. It uses the <code>FILE</code> pointer and functions like <code>fopen()</code>, <code>fclose()</code>, <code>fprintf()</code>, and <code>fscanf()</code>." },
        { "q": "What are command-line arguments?", "a": "Command-line arguments are parameters passed to a program when it is executed from the command line. They are accessed through the <code>argc</code> (argument count) and <code>argv</code> (argument vector) parameters of the <code>main</code> function." },
        { "q": "What is the difference between a compiler and an interpreter?", "a": "A compiler translates the entire source code into machine code at once, creating an executable file. An interpreter translates and executes the code line by line." },
        { "q": "What is a segmentation fault?", "a": "A segmentation fault is a runtime error that occurs when a program tries to access a memory location that it is not allowed to access, such as a restricted area or a location that is no longer valid." },
        { "q": "What is the use of the volatile keyword?", "a": "The <code>volatile</code> keyword tells the compiler that a variable's value may be changed at any time by an external factor (e.g., hardware). This prevents the compiler from applying optimizations that could lead to incorrect behavior." },
        { "q": "What is the difference between const and #define?", "a": "<code>const</code> creates a type-checked, read-only variable that has a specific scope. <code>#define</code> is a preprocessor macro that performs a simple text substitution before compilation and has no type checking or scope." },
        { "q": "What are macros?", "a": "Macros are pieces of code in a program that are given a name. Whenever the name is used, it is replaced by the contents of the macro during the pre-processing stage. Example: <code>#define PI 3.14</code>" },
        { "q": "What is the use of the goto statement?", "a": "The <code>goto</code> statement provides an unconditional jump from the `goto` to a labeled statement in the same function. Its use is generally discouraged as it can make code difficult to read and debug." },
        { "q": "What is typecasting?", "a": "Typecasting is the process of converting a variable from one data type to another. For example, converting an <code>int</code> to a <code>float</code>. Example: <code>float result = (float)5 / 2;</code>" },
        { "q": "What is a recursion base condition?", "a": "The base condition (or base case) is a condition in a recursive function that stops further recursive calls, preventing an infinite loop." },
        { "q": "What is the difference between a compiler error and a runtime error?", "a": "A compiler error is a syntax error detected by the compiler before the program is executed. A runtime error is a logical error that occurs during the execution of the program." },
        { "q": "What is the use of the exit() function?", "a": "The <code>exit()</code> function, from <code>stdlib.h</code>, terminates the program's execution immediately, regardless of where it's called from." },
        { "q": "What is the difference between actual and formal parameters?", "a": "<ul><li><strong>Actual parameters:</strong> The arguments that are passed in a function call.</li><li><strong>Formal parameters:</strong> The variables that are defined in the function's definition.</li></ul>" },
        { "q": "What is the use of the return statement?", "a": "The <code>return</code> statement terminates the execution of a function and returns a value from that function to the calling code." },
        { "q": "What is a nested loop?", "a": "A nested loop is a loop placed inside another loop. The inner loop executes completely for each iteration of the outer loop." },
        { "q": "What is the difference between gets() and scanf() for strings?", "a": "<code>gets()</code> reads a whole line of text, including spaces, until a newline character is encountered. <code>scanf(\\\"%s\\\", ...)</code> stops reading at the first whitespace character." },
        { "q": "Why is gets() unsafe?", "a": "The <code>gets()</code> function is unsafe because it does not perform bounds checking. It can lead to a buffer overflow if the input is larger than the buffer, creating a security vulnerability. <code>fgets()</code> is the recommended safer alternative." },
        { "q": "What is modular programming in C?", "a": "Modular programming is a software design technique that emphasizes separating a program's functionality into independent, interchangeable modules (functions or files), such that each contains everything necessary to execute only one aspect of the desired functionality." },
        { "q": "What is the use of command `gcc filename.c -o output`?", "a": "This command compiles the C source file `filename.c` using the GCC compiler and creates an executable file named `output`." },
        { "q": "What are the advantages of C language?", "a": "<ul><li>Fast execution speed</li><li>Portable and platform-independent</li><li>Simple and easy to learn syntax</li><li>Foundation for many other programming languages</li><li>Widely used in system programming, embedded systems, and game development</li></ul>" }
    ],
    "C++": [
        { "q": "What is C++?", "a": "C++ is an object-oriented programming language developed by Bjarne Stroustrup. It is an extension of the C language that adds OOP features like classes, inheritance, and polymorphism." },
        { "q": "What are the key features of C++?", "a": "<ul><li>Object-Oriented</li><li>Simple & Portable</li><li>Fast execution (close to hardware)</li><li>Rich Standard Template Library (STL)</li><li>Supports function overloading and operator overloading</li></ul>" },
        { "q": "What is the difference between C and C++?", "a": "<table class='custom-table'><thead><tr><th>C</th><th>C++</th></tr></thead><tbody><tr><td>Procedural language</td><td>Object-oriented language</td></tr><tr><td>No classes or objects</td><td>Supports classes and objects</td></tr><tr><td>No function overloading</td><td>Supports function & operator overloading</td></tr><tr><td>Focuses on functions</td><td>Focuses on data and objects</td></tr></tbody></table>" },
        { "q": "What is Object-Oriented Programming (OOP)?", "a": "A programming paradigm that organizes code into objects containing data (attributes) and functions (methods)." },
        { "q": "What are the main OOP concepts in C++?", "a": "<ul><li>Class</li><li>Object</li><li>Encapsulation</li><li>Inheritance</li><li>Polymorphism</li><li>Abstraction</li></ul>" },
        { "q": "What is a class?", "a": "A class is a blueprint or template for creating objects.<pre><code>class Car {\\npublic:\\n    void start() { cout << \\\"Car started\\\"; }\\n};</code></pre>" },
        { "q": "What is an object?", "a": "An object is an instance of a class.<pre><code>Car c1;  // c1 is an object of class Car</code></pre>" },
        { "q": "What is encapsulation?", "a": "Encapsulation means binding data and functions together and hiding details from users. Achieved using private, public, and protected access specifiers." },
        { "q": "What is abstraction?", "a": "Abstraction means showing only essential details and hiding the complex ones." },
        { "q": "What is inheritance?", "a": "Inheritance allows one class to use properties and methods of another class. Example:<pre><code>class Vehicle { };\\nclass Car : public Vehicle { };</code></pre>" },
        { "q": "What is polymorphism?", "a": "Polymorphism means 'many forms' — the ability of functions or objects to behave differently based on context." },
        { "q": "What is function overloading?", "a": "When multiple functions have the same name but different parameters.<pre><code>void add(int a, int b);\\nvoid add(float a, float b);</code></pre>" },
        { "q": "What is operator overloading?", "a": "Redefining the behavior of operators for user-defined data types.<pre><code>Complex operator+(Complex c);</code></pre>" },
        { "q": "What is a constructor?", "a": "A special function that initializes objects automatically when created. It has the same name as the class." },
        { "q": "What are the types of constructors?", "a": "<ul><li>Default constructor</li><li>Parameterized constructor</li><li>Copy constructor</li><li>Move constructor (C++11)</li></ul>" },
        { "q": "What is a destructor?", "a": "A special function used to destroy objects and free resources. Starts with ~ (tilde). Example: <code>~Car() { }</code>" },
        { "q": "What is the difference between constructor and destructor?", "a": "<table class='custom-table'><thead><tr><th>Constructor</th><th>Destructor</th></tr></thead><tbody><tr><td>Initializes object</td><td>Destroys object</td></tr><tr><td>Can be overloaded</td><td>Cannot be overloaded</td></tr><tr><td>Takes parameters</td><td>Takes no parameters</td></tr></tbody></table>" },
        { "q": "What is a copy constructor?", "a": "Used to initialize an object from another object of the same class.<pre><code>Car c2 = c1;</code></pre>" },
        { "q": "What is the difference between shallow copy and deep copy?", "a": "<ul><li><strong>Shallow Copy:</strong> Copies pointer address (leads to shared memory).</li><li><strong>Deep Copy:</strong> Copies actual data into new memory.</li></ul>" },
        { "q": "What is the 'this' pointer?", "a": "<code>this</code> is a keyword that refers to the current object of a class." },
        { "q": "What is a friend function?", "a": "A non-member function that can access private and protected members of a class.<pre><code>friend void showData(Car c);</code></pre>" },
        { "q": "What is function overriding?", "a": "When a derived class redefines a base class function with the same signature." },
        { "q": "What is a virtual function?", "a": "A base class function declared with the virtual keyword to support runtime polymorphism." },
        { "q": "What is a pure virtual function?", "a": "A virtual function with no definition, making the class abstract.<pre><code>virtual void display() = 0;</code></pre>" },
        { "q": "What is an abstract class?", "a": "A class containing at least one pure virtual function. It cannot be instantiated directly." },
        { "q": "What is multiple inheritance?", "a": "When a class inherits from more than one base class.<pre><code>class C : public A, public B { };</code></pre>" },
        { "q": "What is hybrid inheritance?", "a": "A combination of multiple inheritance types (e.g., multiple + hierarchical)." },
        { "q": "What is the diamond problem in C++?", "a": "Occurs in multiple inheritance when two parent classes have the same base class. Solved using virtual inheritance." },
        { "q": "What are access specifiers in C++?", "a": "<ul><li>public – accessible everywhere</li><li>private – accessible only inside the class</li><li>protected – accessible in derived classes</li></ul>" },
        { "q": "What is the difference between public, private, and protected inheritance?", "a": "<table class='custom-table'><thead><tr><th>Inheritance Type</th><th>Effect on Base Class Members</th></tr></thead><tbody><tr><td>Public</td><td>Public → Public, Protected → Protected</td></tr><tr><td>Protected</td><td>Public & Protected → Protected</td></tr><tr><td>Private</td><td>Public & Protected → Private</td></tr></tbody></table>" },
        { "q": "What is the difference between compile-time and runtime polymorphism?", "a": "<ul><li><strong>Compile-time:</strong> Function/Operator Overloading</li><li><strong>Runtime:</strong> Virtual functions and Overriding</li></ul>" },
        { "q": "What is the difference between reference and pointer?", "a": "<table class='custom-table'><thead><tr><th>Reference</th><th>Pointer</th></tr></thead><tbody><tr><td>Must be initialized</td><td>Can be null</td></tr><tr><td>Cannot be reassigned</td><td>Can be reassigned</td></tr><tr><td>No memory allocation</td><td>Holds memory address</td></tr></tbody></table>" },
        { "q": "What is a template in C++?", "a": "Templates allow writing generic code for any data type.<pre><code>template &lt;typename T&gt;\\nT add(T a, T b) { return a + b; }</code></pre>" },
        { "q": "What are the types of templates?", "a": "<ul><li>Function template</li><li>Class template</li></ul>" },
        { "q": "What is exception handling in C++?", "a": "Mechanism to handle runtime errors using try, catch, and throw." },
        { "q": "What is the difference between new/delete and malloc/free?", "a": "<ul><li><strong>new/delete:</strong> C++ operators, call constructors/destructors.</li><li><strong>malloc/free:</strong> C functions, don’t call constructors/destructors.</li></ul>" },
        { "q": "What is a function pointer?", "a": "A pointer that points to a function instead of a variable.<pre><code>int (*fp)(int, int);</code></pre>" },
        { "q": "What is the use of the namespace keyword?", "a": "To avoid naming conflicts by grouping code under a unique name.<pre><code>namespace MyApp { int x = 5; }</code></pre>" },
        { "q": "What is STL in C++?", "a": "STL (Standard Template Library) provides pre-built classes and functions like vector, map, queue, stack, etc." },
        { "q": "What are the main components of STL?", "a": "<ul><li>Containers (vector, list, map)</li><li>Algorithms (sort, find, reverse)</li><li>Iterators (like pointers for containers)</li></ul>" },
        { "q": "What is a vector in C++ STL?", "a": "A dynamic array that can resize automatically.<pre><code>vector&lt;int&gt; v = {1,2,3};\\nv.push_back(4);</code></pre>" },
        { "q": "What is a map in STL?", "a": "Stores key-value pairs in sorted order using Red-Black Trees." },
        { "q": "What is the difference between map and unordered_map?", "a": "<ul><li><strong>map:</strong> ordered (based on Red-Black Tree), slower access (O(log n)).</li><li><strong>unordered_map:</strong> unordered (uses hash table), faster access (O(1) average).</li></ul>" },
        { "q": "What is a lambda expression?", "a": "An inline, anonymous function.<pre><code>auto add = [](int a, int b) { return a + b; };</code></pre>" },
        { "q": "What is typecasting in C++?", "a": "Converting one data type into another. Types: <code>static_cast</code>, <code>dynamic_cast</code>, <code>const_cast</code>, <code>reinterpret_cast</code>." },
        { "q": "What are inline functions?", "a": "Functions defined using the inline keyword to reduce function call overhead." },
        { "q": "What are static members?", "a": "Variables or functions shared by all objects of the class." },
        { "q": "What is constructor overloading?", "a": "When multiple constructors exist with different parameters." },
        { "q": "What is the use of the const keyword in C++?", "a": "To define variables whose values cannot be changed or functions that don’t modify data." },
        { "q": "Why is C++ called a hybrid language?", "a": "Because it supports both procedural (like C) and object-oriented programming features." },
        { "q": "What is the difference between a class and a structure in C++?", "a": "In C++:<ul><li>Members of a structure are <strong>public</strong> by default.</li><li>Members of a class are <strong>private</strong> by default.</li></ul>" },
        { "q": "What is the use of the mutable keyword?", "a": "It allows a member of a class to be modified even if the object is declared as const." },
        { "q": "Can a constructor be virtual?", "a": "No, because constructors are responsible for creating objects, and the virtual mechanism requires an already existing object." },
        { "q": "Can a destructor be virtual?", "a": "Yes. Virtual destructors ensure proper cleanup of derived class objects when deleting base class pointers." },
        { "q": "What is the order of constructor and destructor calls in inheritance?", "a": "<ul><li><strong>Constructor:</strong> Base → Derived</li><li><strong>Destructor:</strong> Derived → Base</li></ul>" },
        { "q": "What is an abstract base class used for?", "a": "To create a common interface for all derived classes that must implement specific functions." },
        { "q": "What is a virtual table (vtable)?", "a": "It’s a hidden table maintained by the compiler to support runtime polymorphism for virtual functions." },
        { "q": "What is a virtual pointer (vptr)?", "a": "A hidden pointer in each object of a class with virtual functions that points to its vtable." },
        { "q": "What is a pure virtual destructor?", "a": "A destructor declared as pure virtual (e.g., <code>virtual ~Base() = 0;</code>). It must still have a definition outside the class." },
        { "q": "What is dynamic_cast used for?", "a": "To safely convert pointers or references to base/derived class types at runtime." },
        { "q": "What is static_cast used for?", "a": "Performs compile-time type conversions (e.g., int → float)." },
        { "q": "What is reinterpret_cast used for?", "a": "Converts one pointer type to another unrelated type (low-level, unsafe conversion)." },
        { "q": "What is const_cast used for?", "a": "Removes the const property from a variable." },
        { "q": "What is function hiding in C++?", "a": "When a derived class function has the same name as a base class function but with different parameters — it hides the base version." },
        { "q": "What is the difference between overriding and hiding?", "a": "<ul><li><strong>Overriding:</strong> Base function is virtual, redefined in the derived class.</li><li><strong>Hiding:</strong> Base function is non-virtual, redefined in the derived class.</li></ul>" },
        { "q": "What is multiple-level inheritance?", "a": "A class derived from another derived class.<pre><code>class A {};\\nclass B : public A {};\\nclass C : public B {};</code></pre>" },
        { "q": "What is hierarchical inheritance?", "a": "Multiple classes inheriting from the same base class." },
        { "q": "What is composition in C++?", "a": "When one class contains an object of another class. Represents a 'has-a' relationship.<pre><code>class Engine {};\\nclass Car { Engine e; };</code></pre>" },
        { "q": "What is aggregation in C++?", "a": "A weaker form of composition — objects can exist independently.<pre><code>class Department;\\nclass Student {\\n  Department* dept;\\n};</code></pre>" },
        { "q": "What are inline member functions?", "a": "Functions defined inside a class automatically become inline (the compiler may expand them inline)." },
        { "q": "What is the difference between early binding and late binding?", "a": "<ul><li><strong>Early binding:</strong> Function call resolved at compile time.</li><li><strong>Late binding:</strong> Function call resolved at runtime (via virtual functions).</li></ul>" },
        { "q": "What is the difference between vector and list in STL?", "a": "<table class='custom-table'><thead><tr><th>Vector</th><th>List</th></tr></thead><tbody><tr><td>Dynamic array</td><td>Doubly linked list</td></tr><tr><td>Fast random access</td><td>Fast insertion/deletion</td></tr><tr><td>Slow insertion in middle</td><td>Slow random access</td></tr></tbody></table>" },
        { "q": "What is an iterator in C++ STL?", "a": "An iterator acts like a pointer to traverse elements of STL containers.<pre><code>for (auto it = v.begin(); it != v.end(); ++it) {\\n    cout << *it;\\n}</code></pre>" },
        { "q": "What is the difference between map and multimap?", "a": "<ul><li><strong>map:</strong> unique keys</li><li><strong>multimap:</strong> allows duplicate keys</li></ul>" },
        { "q": "What is a functor?", "a": "A class or struct that acts like a function using the <code>operator()</code> overloading." },
        { "q": "What is RAII (Resource Acquisition Is Initialization)?", "a": "A technique that ties resource management (like memory or file handles) to object lifetime using constructors and destructors." },
        { "q": "What is a memory leak in C++?", "a": "When allocated memory using <code>new</code> is not freed using <code>delete</code>." },
        { "q": "How can you avoid memory leaks?", "a": "<ul><li>Always use <code>delete</code> for every <code>new</code>.</li><li>Prefer smart pointers (<code>unique_ptr</code>, <code>shared_ptr</code>).</li></ul>" },
        { "q": "What are smart pointers?", "a": "Objects that act like pointers but automatically manage memory.<pre><code>unique_ptr&lt;int&gt; ptr = make_unique&lt;int&gt;(10);</code></pre>" },
        { "q": "What is the difference between unique_ptr and shared_ptr?", "a": "<table class='custom-table'><thead><tr><th>unique_ptr</th><th>shared_ptr</th></tr></thead><tbody><tr><td>Only one owner</td><td>Multiple owners</td></tr><tr><td>Automatically deletes when out of scope</td><td>Deletes when the last owner is destroyed</td></tr></tbody></table>" },
        { "q": "What is weak_ptr?", "a": "A non-owning smart pointer that prevents circular references in <code>shared_ptr</code>s." },
        { "q": "What is the role of the explicit keyword?", "a": "Prevents implicit type conversions using constructors.<pre><code>explicit MyClass(int x);</code></pre>" },
        { "q": "What is the difference between ++i and i++?", "a": "<ul><li><strong>++i:</strong> Pre-increment (faster, no copy created)</li><li><strong>i++:</strong> Post-increment (creates a temporary copy)</li></ul>" },
        { "q": "What is the difference between a constant pointer and a pointer to a constant?", "a": "<ul><li><strong>Pointer to constant:</strong> data cannot be changed. (<code>const int *p;</code>)</li><li><strong>Constant pointer:</strong> address cannot be changed. (<code>int *const p;</code>)</li></ul>" },
        { "q": "What is namespace aliasing?", "a": "Allows giving a short name to a namespace.<pre><code>namespace ns = myLongNamespace;</code></pre>" },
        { "q": "What is the difference between endl and \\n?", "a": "<ul><li><strong>endl:</strong> Inserts a newline and flushes the buffer.</li><li><strong>\\n:</strong> Just inserts a newline (faster).</li></ul>" },
        { "q": "What is a function pointer array?", "a": "An array storing multiple function addresses to call dynamically." },
        { "q": "What is the difference between stack and heap memory?", "a": "<table class='custom-table'><thead><tr><th>Stack</th><th>Heap</th></tr></thead><tbody><tr><td>Automatically managed</td><td>Manually managed</td></tr><tr><td>Faster</td><td>Slower</td></tr><tr><td>Limited size</td><td>Large, dynamic size</td></tr></tbody></table>" },
        { "q": "Can you overload the main() function?", "a": "No, the compiler always looks for <code>int main()</code> as the entry point." },
        { "q": "What is a static class member?", "a": "Shared by all objects of the class; belongs to the class rather than an instance." },
        { "q": "What are references used for in function parameters?", "a": "To avoid copying and to allow modification of original variables." },
        { "q": "What are the advantages of using C++ over Java or Python?", "a": "<ul><li>Faster execution</li><li>Close to hardware (useful for system programming)</li><li>Better control over memory</li><li>Supports both OOP and procedural style</li></ul>" },
        { "q": "What is a singleton class?", "a": "A class that allows only one instance during runtime." },
        { "q": "What is the difference between throw and throws in C++?", "a": "Only <code>throw</code> exists in C++. It’s used to raise exceptions (<code>throw runtime_error(\\\"Error\\\");</code>). <code>throws</code> is Java-specific." },
        { "q": "Why should destructors be virtual in base classes?", "a": "So that the derived class destructor is called properly when deleting through a base class pointer — preventing memory leaks." },
        { "q": "What is recursion?", "a": "A function calling itself until a base condition is met." },
        { "q": "What is the use of enum in C++?", "a": "Defines a set of named integral constants." },
        { "q": "What are macros in C++?", "a": "Preprocessor definitions using <code>#define</code>." },
        { "q": "What is the difference between stack overflow and heap overflow?", "a": "<ul><li><strong>Stack overflow:</strong> Too many recursive calls/local vars.</li><li><strong>Heap overflow:</strong> Too much dynamic allocation.</li></ul>" },
        { "q": "What is a dangling pointer?", "a": "A pointer pointing to freed/deallocated memory." },
        { "q": "What is the difference between delete and delete[]?", "a": "<ul><li><strong>delete:</strong> for a single object.</li><li><strong>delete[]:</strong> for an array of objects.</li></ul>" }
    ],
    "Python & Libraries": [
        { "q": "What are the key features of Python?", "a": "<ul><li>Easy to learn and read</li><li>Interpreted and dynamically typed</li><li>Supports OOP and functional programming</li><li>Large standard library</li><li>Cross-platform</li></ul>" },
        { "q": "What are Python data types?", "a": "int, float, bool, str, list, tuple, set, dict, NoneType." },
        { "q": "What are mutable and immutable types?", "a": "<ul><li><strong>Mutable:</strong> Can be changed → list, dict, set</li><li><strong>Immutable:</strong> Cannot be changed → str, tuple, int</li></ul>" },
        { "q": "Difference between list, tuple, set, and dictionary?", "a": "<table class='custom-table'><thead><tr><th>Type</th><th>Ordered</th><th>Mutable</th><th>Duplicates</th><th>Syntax</th></tr></thead><tbody><tr><td>List</td><td>✅</td><td>✅</td><td>✅</td><td>[1,2,3]</td></tr><tr><td>Tuple</td><td>✅</td><td>❌</td><td>✅</td><td>(1,2,3)</td></tr><tr><td>Set</td><td>❌</td><td>✅</td><td>❌</td><td>{1,2,3}</td></tr><tr><td>Dict</td><td>✅ (3.7+)</td><td>✅</td><td>Keys unique</td><td>{'a':1}</td></tr></tbody></table>" },
        { "q": "What is the difference between shallow copy and deep copy?", "a": "<code>copy.copy()</code> → shallow (copies references), <code>copy.deepcopy()</code> → full independent copy" },
        { "q": "What is list comprehension?", "a": "Short way to create lists: <pre><code>squares = [x*x for x in range(5)]</code></pre>" },
        { "q": "What are *args and **kwargs?", "a": "Used in functions for variable number of arguments.<pre><code>def func(*args, **kwargs):\\n    print(args, kwargs)</code></pre>" },
        { "q": "What are lambda functions?", "a": "Anonymous single-line functions: <pre><code>add = lambda x, y: x + y</code></pre>" },
        { "q": "What is the difference between is and == ?", "a": "<ul><li><strong>is:</strong> compares identity (memory address)</li><li><strong>==:</strong> compares values</li></ul>" },
        { "q": "Explain Python’s memory management.", "a": "Uses reference counting + garbage collector to remove unused objects automatically." },
        { "q": "What are decorators?", "a": "Functions that modify other functions.<pre><code>def decorator(func):\\n    def wrapper():\\n        print(\\\"Before\\\")\\n        func()\\n        print(\\\"After\\\")\\n    return wrapper</code></pre>" },
        { "q": "What are Python modules and packages?", "a": "<ul><li><strong>Module:</strong> A .py file containing code.</li><li><strong>Package:</strong> A directory with __init__.py, containing multiple modules.</li></ul>" },
        { "q": "What are Python iterators and generators?", "a": "<ul><li><strong>Iterator:</strong> Object with __iter__() and __next__() methods.</li><li><strong>Generator:</strong> Uses <code>yield</code> keyword to return data lazily.</li></ul>" },
        { "q": "What is exception handling?", "a": "Using <code>try</code>, <code>except</code>, <code>else</code>, <code>finally</code> to handle runtime errors.<pre><code>try:\\n    x = 1/0\\nexcept ZeroDivisionError:\\n    print(\\\"Cannot divide by zero!\\\")</code></pre>" },
        { "q": "Difference between @staticmethod, @classmethod, and instance methods?", "a": "<ul><li><strong>staticmethod:</strong> No access to class or instance.</li><li><strong>classmethod:</strong> Has access to class (cls).</li><li><strong>Instance method:</strong> Has access to both (self).</li></ul>" },
        { "q": "What is OOP in Python?", "a": "Encapsulation, Inheritance, Polymorphism, Abstraction implemented using classes." },
        { "q": "What is a virtual environment?", "a": "An isolated Python environment for dependencies using venv or conda." },
        { "q": "What is the difference between Python 2 and Python 3?", "a": "<ul><li><code>print</code> is a function in Python 3.</li><li>Unicode default in Python 3.</li><li>Integer division differs (<code>/</code> vs <code>//</code>).</li></ul>" },
        { "q": "What are Python’s built-in data structures?", "a": "List, tuple, set, dictionary, strings." },
        { "q": "What is NumPy and why is it used?", "a": "NumPy = Numerical Python. Used for arrays, vectorized operations, linear algebra, random numbers." },
        { "q": "What is the difference between Python lists and NumPy arrays?", "a": "NumPy arrays are faster, fixed-type, and support element-wise operations." },
        { "q": "How do you create a NumPy array?", "a": "<pre><code>import numpy as np\\narr = np.array([1, 2, 3])</code></pre>" },
        { "q": "What are broadcasting rules in NumPy?", "a": "Allows operations on arrays of different shapes by automatically expanding smaller ones." },
        { "q": "How do you generate random numbers in NumPy?", "a": "<pre><code>np.random.rand(3)\\nnp.random.randint(1, 10, 5)</code></pre>" },
        { "q": "How do you reshape arrays?", "a": "<pre><code>arr.reshape(2, 3)</code></pre>" },
        { "q": "What are np.mean(), np.median(), np.std() used for?", "a": "Statistical operations on arrays." },
        { "q": "How to perform element-wise arithmetic?", "a": "<code>a + b</code>, <code>a - b</code>, <code>a * b</code>, <code>a / b</code>" },
        { "q": "How to access specific rows/columns?", "a": "<pre><code>arr[1, 2]  # element\\narr[:, 0]  # column\\narr[0, :]  # row</code></pre>" },
        { "q": "What is np.concatenate() used for?", "a": "To combine arrays along a specified axis." },
        { "q": "What is Pandas used for?", "a": "For data cleaning, analysis, and manipulation using DataFrames." },
        { "q": "What is a DataFrame in Pandas?", "a": "2D labeled data structure (like an Excel sheet)." },
        { "q": "How to create a DataFrame?", "a": "<pre><code>import pandas as pd\\ndata = {'Name':['A','B'], 'Age':[20,21]}\\ndf = pd.DataFrame(data)</code></pre>" },
        { "q": "How to read and write CSV files?", "a": "<pre><code>pd.read_csv('file.csv')\\ndf.to_csv('output.csv', index=False)</code></pre>" },
        { "q": "What is the difference between loc[] and iloc[]?", "a": "<ul><li><strong>loc[]:</strong> label-based</li><li><strong>iloc[]:</strong> integer index-based</li></ul>" },
        { "q": "How to handle missing values?", "a": "<pre><code>df.isnull().sum()\\ndf.fillna(0)\\ndf.dropna()</code></pre>" },
        { "q": "How to filter data in Pandas?", "a": "<pre><code>df[df['Age'] > 20]</code></pre>" },
        { "q": "How to group and summarize data?", "a": "<pre><code>df.groupby('Department')['Salary'].mean()</code></pre>" },
        { "q": "What are apply() and map() used for?", "a": "<ul><li><strong>apply()</strong> → Apply function to rows/columns.</li><li><strong>map()</strong> → Apply function to Series elements.</li></ul>" },
        { "q": "How to merge/join two DataFrames?", "a": "<pre><code>pd.merge(df1, df2, on='id', how='inner')</code></pre>" },
        { "q": "What is Matplotlib used for?", "a": "For data visualization — line, bar, scatter, histogram plots." },
        { "q": "How do you plot a line graph using Matplotlib?", "a": "<pre><code>import matplotlib.pyplot as plt\\nplt.plot([1,2,3],[4,5,6])\\nplt.show()</code></pre>" },
        { "q": "What is Seaborn?", "a": "Built on Matplotlib — provides high-level statistical plots." },
        { "q": "How to create a heatmap in Seaborn?", "a": "<pre><code>import seaborn as sns\\nsns.heatmap(df.corr(), annot=True)</code></pre>" },
        { "q": "What’s the difference between Matplotlib and Seaborn?", "a": "<ul><li><strong>Matplotlib</strong> → Low-level, more control.</li><li><strong>Seaborn</strong> → High-level, visually attractive.</li></ul>" },
        { "q": "What is Scikit-learn used for?", "a": "Machine Learning library for regression, classification, clustering, preprocessing." },
        { "q": "What are some key modules in Scikit-learn?", "a": "<code>sklearn.linear_model</code>, <code>sklearn.tree</code>, <code>sklearn.cluster</code>, <code>sklearn.metrics</code>" },
        { "q": "How do you split data into training and testing sets?", "a": "<pre><code>from sklearn.model_selection import train_test_split\\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)</code></pre>" },
        { "q": "How do you train a linear regression model?", "a": "<pre><code>from sklearn.linear_model import LinearRegression\\nmodel = LinearRegression()\\nmodel.fit(X_train, y_train)</code></pre>" },
        { "q": "How do you evaluate model performance?", "a": "Using metrics like accuracy, precision, recall, F1-score, or RMSE." },
        { "q": "What is feature scaling?", "a": "Normalization or standardization to keep features on same scale using StandardScaler() or MinMaxScaler()." },
        { "q": "What is overfitting and underfitting?", "a": "<ul><li><strong>Overfitting:</strong> Model learns noise, performs poorly on new data.</li><li><strong>Underfitting:</strong> Model too simple to capture patterns.</li></ul>" },
        { "q": "What is cross-validation?", "a": "Splitting data into multiple folds to test model performance fairly." },
        { "q": "What is a confusion matrix?", "a": "A table showing actual vs predicted outcomes for classification tasks." },
        { "q": "What is one-hot encoding?", "a": "Converting categorical variables into numeric dummy columns.<pre><code>pd.get_dummies(df['Gender'])</code></pre>" },
        { "q": "What are Python’s key features?", "a": "Python is an interpreted, dynamically typed, high-level, and object-oriented language. It supports modularity, exceptions, and extensive libraries for AI/ML, data science, and web development." },
        { "q": "Explain Python’s memory management.", "a": "Python uses reference counting and garbage collection to free memory automatically when objects are no longer in use." },
        { "q": "What are decorators in Python?", "a": "Decorators are functions that modify other functions or classes without changing their actual code.<pre><code>def decorator(func):\\n    def wrapper():\\n        print(\\\"Before function\\\")\\n        func()\\n        print(\\\"After function\\\")\\n    return wrapper\\n@decorator\\ndef greet():\\n    print(\\\"Hello!\\\")</code></pre>" },
        { "q": "What is the difference between deepcopy() and copy()?", "a": "<ul><li><strong>copy()</strong> → Shallow copy (copies references)</li><li><strong>deepcopy()</strong> → Copies entire data recursively</li></ul>" },
        { "q": "Explain list comprehension with an example.", "a": "Compact and faster way to create lists.<pre><code>squares = [x**2 for x in range(5)]</code></pre>" },
        { "q": "What are Python generators?", "a": "Generators are functions that use `yield` to return one item at a time, saving memory.<pre><code>def gen():\\n    for i in range(5):\\n        yield i</code></pre>" },
        { "q": "Explain Python’s GIL (Global Interpreter Lock).", "a": "It prevents multiple native threads from executing Python bytecodes simultaneously — meaning Python threads aren’t truly parallel (use multiprocessing for CPU-heavy tasks)." },
        { "q": "What is pickling in Python?", "a": "Serialization process to convert Python objects into byte streams for storage or transfer." },
        { "q": "Explain Python namespaces.", "a": "A namespace is a mapping from names to objects (e.g., local, global, built-in namespaces)." },
        { "q": "How do you manage dependencies in Python projects?", "a": "Using `requirements.txt` or virtual environments via `venv` or `conda`." },
        { "q": "What are *args and **kwargs?", "a": "They handle a variable number of arguments.<pre><code>def func(*args, **kwargs):\\n    print(args, kwargs)</code></pre>" },
        { "q": "What is NumPy and why is it used?", "a": "NumPy is used for numerical computation — provides multi-dimensional arrays (ndarray) and high-speed operations." },
        { "q": "Explain the difference between ndarray and Python list.", "a": "NumPy arrays are homogeneous, faster, and support vectorized operations, unlike Python lists." },
        { "q": "How to perform element-wise operations in NumPy?", "a": "<pre><code>a = np.array([1,2,3])\\nb = np.array([4,5,6])\\na + b  # [5 7 9]</code></pre>" },
        { "q": "What are broadcasting rules in NumPy?", "a": "Allows operations between arrays of different shapes by stretching dimensions automatically." },
        { "q": "How to find mean, median, and standard deviation?", "a": "<pre><code>np.mean(arr)\\nnp.median(arr)\\nnp.std(arr)</code></pre>" },
        { "q": "How to reshape and flatten an array?", "a": "<pre><code>arr.reshape(2,3)\\narr.flatten()</code></pre>" },
        { "q": "What is the difference between np.zeros() and np.empty()?", "a": "<ul><li><strong>zeros()</strong> → initializes with 0</li><li><strong>empty()</strong> → allocates space without initializing (faster)</li></ul>" },
        { "q": "What is Pandas?", "a": "A Python library for data manipulation and analysis using Series and DataFrame." },
        { "q": "How to create a DataFrame?", "a": "<pre><code>import pandas as pd\\ndata = {'Name': ['Akash', 'Riya'], 'Age': [22, 21]}\\ndf = pd.DataFrame(data)</code></pre>" },
        { "q": "Difference between iloc[] and loc[].", "a": "<ul><li><strong>iloc[]</strong> → index-based</li><li><strong>loc[]</strong> → label-based</li></ul>" },
        { "q": "How to handle missing data in Pandas?", "a": "<pre><code>df.fillna(0)\\ndf.dropna()</code></pre>" },
        { "q": "How to read and write CSV files?", "a": "<pre><code>pd.read_csv('file.csv')\\ndf.to_csv('output.csv')</code></pre>" },
        { "q": "How to filter rows in Pandas?", "a": "<pre><code>df[df['Age'] > 20]</code></pre>" },
        { "q": "How to apply a function to a column?", "a": "<pre><code>df['Age'] = df['Age'].apply(lambda x: x+1)</code></pre>" },
        { "q": "How to merge two DataFrames?", "a": "<pre><code>pd.merge(df1, df2, on='id')</code></pre>" },
        { "q": "What is the difference between groupby() and pivot_table()?", "a": "Both aggregate data, but <code>pivot_table</code> is more flexible and handles multi-indexing." },
        { "q": "How to find unique values and their counts?", "a": "<pre><code>df['col'].unique()\\ndf['col'].value_counts()</code></pre>" },
        { "q": "Create a simple line plot.", "a": "<pre><code>import matplotlib.pyplot as plt\\nplt.plot([1,2,3],[2,4,6])\\nplt.show()</code></pre>" },
        { "q": "How to label axes and add titles?", "a": "<pre><code>plt.xlabel('X-axis')\\nplt.ylabel('Y-axis')\\nplt.title('My Chart')</code></pre>" },
        { "q": "Create a Seaborn heatmap.", "a": "<pre><code>import seaborn as sns\\nsns.heatmap(df.corr(), annot=True)</code></pre>" },
        { "q": "What is Scikit-learn?", "a": "A Python library for machine learning — includes preprocessing, model training, and evaluation tools." },
        { "q": "How to evaluate a model’s accuracy?", "a": "<pre><code>from sklearn.metrics import accuracy_score\\naccuracy_score(y_test, y_pred)</code></pre>" },
        { "q": "How to check feature importance in models?", "a": "<code>model.feature_importances_</code>" },
        { "q": "What are Python metaclasses?", "a": "Metaclasses define how classes behave. A metaclass is the 'class of a class' — you can customize class creation.<pre><code>class Meta(type):\\n    def __new__(cls, name, bases, dct):\\n        print(\\\"Creating class\\\", name)\\n        return super().__new__(cls, name, bases, dct)</code></pre>" },
        { "q": "What are context managers?", "a": "They handle setup/teardown automatically, using `with`.<pre><code>with open(\\\"file.txt\\\") as f:\\n    data = f.read()</code></pre>Automatically closes the file, even if an error occurs." },
        { "q": "Explain Python’s memory optimization mechanism.", "a": "<ul><li>Small integers and strings are interned.</li><li>Garbage collector removes cyclic references.</li><li>Reference counting + generational GC.</li></ul>" },
        { "q": "What is monkey patching?", "a": "Dynamically modifying a class or module at runtime.<pre><code>import math\\nmath.sqrt = lambda x: x**0.5</code></pre>" },
        { "q": "What are Python descriptors?", "a": "Descriptors manage attribute access (used in properties).<pre><code>class Desc:\\n    def __get__(self, obj, type=None): return obj._val\\n    def __set__(self, obj, val): obj._val = val**2</code></pre>" },
        { "q": "What is the difference between deepcopy and serialization?", "a": "<ul><li><strong>deepcopy:</strong> clones in memory</li><li><strong>serialization:</strong> converts object → byte stream (can store/transmit)</li></ul>" },
        { "q": "Explain __slots__.", "a": "Used to restrict attribute creation and save memory.<pre><code>class Point:\\n    __slots__ = ('x', 'y')</code></pre>" },
        { "q": "What is the difference between asyncio and threading?", "a": "<ul><li><strong>asyncio:</strong> single-threaded, cooperative multitasking</li><li><strong>threading:</strong> preemptive multitasking using OS threads</li></ul>" },
        { "q": "Explain the yield from statement.", "a": "Delegates part of a generator’s operation to another generator.<pre><code>def gen():\\n    yield from range(5)</code></pre>" },
        { "q": "Explain the use of dataclasses.", "a": "Simplifies class creation for data storage.<pre><code>from dataclasses import dataclass\\n@dataclass\\nclass Student:\\n    name: str\\n    marks: int</code></pre>" },
        { "q": "What are Python type hints?", "a": "Used for static typing support.<pre><code>def add(a: int, b: int) -> int:\\n    return a + b</code></pre>" },
        { "q": "How do you profile Python code performance?", "a": "Use <code>cProfile</code> or <code>timeit</code> to identify bottlenecks." },
        { "q": "How do you handle large datasets efficiently in Python?", "a": "<ul><li>Use `chunksize` in Pandas</li><li>Use NumPy memory mapping</li><li>Use Dask for distributed processing</li></ul>" },
        { "q": "What’s the difference between np.vectorize() and loops?", "a": "<code>np.vectorize()</code> is syntactic sugar—it doesn’t improve performance significantly like native ufuncs." },
        { "q": "How to find NaNs in a NumPy array?", "a": "<code>np.isnan(arr)</code>" },
        { "q": "What is np.einsum() used for?", "a": "Performs optimized matrix operations with custom indexing." },
        { "q": "How do you optimize Pandas performance?", "a": "<ul><li>Use categorical data for repetitive strings</li><li>Avoid loops; use vectorized ops</li><li>Convert DataFrames to NumPy arrays for heavy computation</li></ul>" },
        { "q": "How to handle outliers using Pandas?", "a": "<pre><code>q1 = df['col'].quantile(0.25)\\nq3 = df['col'].quantile(0.75)\\niqr = q3 - q1\\ndf = df[~((df['col'] < (q1 - 1.5*iqr)) | (df['col'] > (q3 + 1.5*iqr)))]</code></pre>" },
        { "q": "How to detect duplicate rows?", "a": "<code>df[df.duplicated()]</code>" },
        { "q": "How to apply a function row-wise?", "a": "<code>df.apply(lambda x: x.sum(), axis=1)</code>" },
        { "q": "How to read only specific columns from a CSV?", "a": "<code>pd.read_csv(\\\"data.csv\\\", usecols=['Name','Age'])</code>" },
        { "q": "Difference between .loc[] and .query().", "a": "<code>.query()</code> is faster and more readable for filtering with conditions." },
        { "q": "How do you join DataFrames with different column names?", "a": "<code>pd.merge(df1, df2, left_on='id1', right_on='id2')</code>" },
        { "q": "How to use pivot_table() for aggregation?", "a": "<code>pd.pivot_table(df, values='Sales', index='Region', aggfunc='sum')</code>" },
        { "q": "How do you handle time-series data in Pandas?", "a": "Use <code>pd.to_datetime()</code> and <code>resample()</code>.<pre><code>df['date'] = pd.to_datetime(df['date'])\\ndf.resample('M').mean()</code></pre>" },
        { "q": "How do you handle categorical encoding in Pandas?", "a": "<code>pd.get_dummies(df, columns=['Gender'])</code>" },
        { "q": "What’s the difference between fit(), transform(), and fit_transform()?", "a": "<ul><li><strong>fit()</strong> learns parameters</li><li><strong>transform()</strong> applies transformation</li><li><strong>fit_transform()</strong> does both together</li></ul>" },
        { "q": "What is a pipeline in Scikit-learn?", "a": "Combines multiple preprocessing and model steps.<pre><code>from sklearn.pipeline import Pipeline\\npipe = Pipeline([('scaler', StandardScaler()), ('model', LogisticRegression())])</code></pre>" },
        { "q": "What is cross-validation? Why is it used?", "a": "It ensures model generalization by training and validating on different subsets." },
        { "q": "Difference between GridSearchCV and RandomizedSearchCV?", "a": "<ul><li><strong>GridSearchCV:</strong> exhaustive parameter search</li><li><strong>RandomizedSearchCV:</strong> random combination sampling (faster)</li></ul>" },
        { "q": "What is bias-variance tradeoff?", "a": "High bias → underfitting<br>High variance → overfitting<br>Goal: balance between the two." },
        { "q": "What are precision, recall, and F1-score?", "a": "<ul><li><strong>Precision:</strong> TP / (TP + FP)</li><li><strong>Recall:</strong> TP / (TP + FN)</li><li><strong>F1-score:</strong> Harmonic mean of precision and recall</li></ul>" },
        { "q": "What is ROC and AUC?", "a": "ROC curve plots TPR vs FPR; AUC measures area under ROC — higher = better performance." },
        { "q": "How to handle class imbalance?", "a": "Oversampling (SMOTE), Undersampling, Weighted models" },
        { "q": "Explain regularization and types.", "a": "Reduces overfitting by penalizing large coefficients. L1 → Lasso, L2 → Ridge" },
        { "q": "What is feature scaling and why is it important?", "a": "Ensures all features contribute equally to the model. Standard techniques: MinMaxScaler, StandardScaler." },
        { "q": "How to prevent overfitting?", "a": "Regularization, Cross-validation, Dropout (NN), Simpler models" },
        { "q": "What are the assumptions of linear regression?", "a": "Linearity, independence, homoscedasticity, normality of residuals." },
        { "q": "What is one-hot encoding vs label encoding?", "a": "<ul><li><strong>One-hot:</strong> binary columns per category</li><li><strong>Label:</strong> numeric label per category</li></ul>" },
        { "q": "What’s the difference between classification and regression?", "a": "Classification → categorical output<br>Regression → continuous output" },
        { "q": "What is dimensionality reduction?", "a": "Reducing number of features (e.g., PCA) while preserving variance." },
        { "q": "What is PCA?", "a": "Principal Component Analysis transforms correlated features into smaller uncorrelated dimensions." },
        { "q": "What is the curse of dimensionality?", "a": "Performance decreases as number of features grows due to sparse data." },
        { "q": "What is the difference between bagging and boosting?", "a": "<ul><li><strong>Bagging:</strong> independent models (e.g., Random Forest)</li><li><strong>Boosting:</strong> sequential models improving previous errors (e.g., XGBoost)</li></ul>" },
        { "q": "Explain confusion matrix.", "a": "A table showing TP, FP, TN, FN — helps visualize classification performance." },
        { "q": "What is feature selection and why is it needed?", "a": "Removes irrelevant features to reduce complexity and improve model accuracy." },
        { "q": "What is normalization vs standardization?", "a": "<ul><li><strong>Normalization:</strong> scales between 0–1</li><li><strong>Standardization:</strong> mean = 0, std = 1</li></ul>" },
        { "q": "What are hyperparameters?", "a": "Settings defined before training (e.g., learning rate, depth) — tuned for best results." },
        { "q": "What is stochastic gradient descent (SGD)?", "a": "Optimization algorithm that updates weights incrementally using subsets (batches) of data." },
        { "q": "What is KNN and how does it work?", "a": "KNN classifies data based on k nearest neighbors using distance metrics like Euclidean." },
        { "q": "What is the difference between Decision Tree and Random Forest?", "a": "Random Forest uses multiple decision trees and averages results to reduce overfitting." }
    ],
    "HTML5": [
        { "q": "What is HTML?", "a": "HTML (HyperText Markup Language) is used to structure content on web pages using tags and elements." },
        { "q": "What are HTML5’s new features?", "a": "<ul><li>New semantic tags (&lt;header&gt;, &lt;footer&gt;, &lt;section&gt;, &lt;article&gt;)</li><li>Audio/Video support</li><li>Canvas for drawing</li><li>Local storage</li><li>Geolocation API</li><li>Form enhancements</li></ul>" },
        { "q": "What are semantic tags?", "a": "Tags that convey meaning — e.g., &lt;header&gt;, &lt;footer&gt;, &lt;article&gt;, &lt;nav&gt;, &lt;section&gt; improve SEO and readability." },
        { "q": "Difference between <div> and <section>?", "a": "<code>&lt;div&gt;</code> is generic; <code>&lt;section&gt;</code> represents a meaningful section of a document." },
        { "q": "What is the DOCTYPE in HTML5?", "a": "<code>&lt;!DOCTYPE html&gt;</code> It tells the browser to use HTML5 standards mode." },
        { "q": "What are HTML elements and attributes?", "a": "<ul><li><strong>Element:</strong> A tag + content (<code>&lt;p&gt;Hello&lt;/p&gt;</code>)</li><li><strong>Attribute:</strong> Extra info about an element (<code>&lt;img src=\\\"image.jpg\\\" alt=\\\"Photo\\\"&gt;</code>)</li></ul>" },
        { "q": "What are self-closing tags?", "a": "Tags that don’t need a closing part, like <code>&lt;img&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;br&gt;</code>, <code>&lt;hr&gt;</code>." },
        { "q": "What is the difference between <strong> and <b>?", "a": "<ul><li><strong>&lt;strong&gt;</strong> → gives importance (semantic)</li><li><strong>&lt;b&gt;</strong> → bold visual effect (non-semantic)</li></ul>" },
        { "q": "What’s the difference between <em> and <i>?", "a": "<ul><li><strong>&lt;em&gt;</strong> → emphasizes text meaning</li><li><strong>&lt;i&gt;</strong> → italicizes text visually</li></ul>" },
        { "q": "How to make a hyperlink?", "a": "<code>&lt;a href=\\\"https://openai.com\\\"&gt;Visit OpenAI&lt;/a&gt;</code>" },
        { "q": "What is the purpose of the <meta> tag?", "a": "It defines metadata like character set, author, and viewport." },
        { "q": "What is the viewport meta tag used for?", "a": "To make web pages responsive: <pre><code>&lt;meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"&gt;</code></pre>" },
        { "q": "How can you include a JavaScript file in HTML?", "a": "<code>&lt;script src=\\\"script.js\\\"&gt;&lt;/script&gt;</code>" },
        { "q": "What is the purpose of <link> tag?", "a": "Used to link external CSS files: <code>&lt;link rel=\\\"stylesheet\\\" href=\\\"style.css\\\"&gt;</code>" },
        { "q": "What’s the difference between block-level and inline elements?", "a": "<ul><li><strong>Block:</strong> starts on a new line (<code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;section&gt;</code>)</li><li><strong>Inline:</strong> stays in the same line (<code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code>)</li></ul>" },
        { "q": "What are <figure> and <figcaption> used for?", "a": "To group media with captions.<pre><code>&lt;figure&gt;\\n  &lt;img src=\\\"photo.jpg\\\"&gt;\\n  &lt;figcaption&gt;My Photo&lt;/figcaption&gt;\\n&lt;/figure&gt;</code></pre>" },
        { "q": "What is the <canvas> element?", "a": "Used to draw 2D graphics dynamically via JavaScript." },
        { "q": "How is <video> used in HTML5?", "a": "<pre><code>&lt;video controls&gt;\\n  &lt;source src=\\\"movie.mp4\\\" type=\\\"video/mp4\\\"&gt;\\n&lt;/video&gt;</code></pre>" },
        { "q": "How is <audio> used?", "a": "<pre><code>&lt;audio controls&gt;\\n  &lt;source src=\\\"sound.mp3\\\" type=\\\"audio/mp3\\\"&gt;\\n&lt;/audio&gt;</code></pre>" },
        { "q": "What is localStorage vs sessionStorage?", "a": "<ul><li><strong>localStorage:</strong> permanent data storage</li><li><strong>sessionStorage:</strong> cleared when tab closes</li></ul>" },
        { "q": "How to create a table in HTML?", "a": "<pre><code>&lt;table&gt;\\n  &lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Age&lt;/th&gt;&lt;/tr&gt;\\n  &lt;tr&gt;&lt;td&gt;Akash&lt;/td&gt;&lt;td&gt;21&lt;/td&gt;&lt;/tr&gt;\\n&lt;/table&gt;</code></pre>" },
        { "q": "How to create lists?", "a": "Ordered list → <code>&lt;ol&gt;</code>, Unordered list → <code>&lt;ul&gt;</code>, Definition list → <code>&lt;dl&gt;</code>" },
        { "q": "What is the purpose of <form> tag?", "a": "Used to collect user input." },
        { "q": "Name some HTML5 form input types.", "a": "email, number, date, range, color, url, search" },
        { "q": "What does the placeholder attribute do?", "a": "Displays hint text inside inputs." },
        { "q": "How to make input required?", "a": "<code>&lt;input type=\\\"text\\\" required&gt;</code>" },
        { "q": "What’s the difference between GET and POST methods?", "a": "<ul><li><strong>GET:</strong> data in URL, less secure</li><li><strong>POST:</strong> data in body, secure and supports larger data</li></ul>" },
        { "q": "What are data- attributes?", "a": "Custom attributes to store extra data in elements.<pre><code>&lt;div data-id=\\\"123\\\"&gt;Content&lt;/div&gt;</code></pre>" },
        { "q": "What is the <iframe> tag used for?", "a": "Embedding another webpage within a page." },
        { "q": "What is the <progress> element?", "a": "Displays task progress: <code>&lt;progress value=\\\"60\\\" max=\\\"100\\\"&gt;&lt;/progress&gt;</code>" },
        { "q": "What is the <meter> tag?", "a": "Represents a scalar measurement: <code>&lt;meter min=\\\"0\\\" max=\\\"100\\\" value=\\\"75\\\"&gt;&lt;/meter&gt;</code>" },
        { "q": "Difference between <header> and <head>?", "a": "<ul><li><strong>&lt;head&gt;</strong> → contains meta info</li><li><strong>&lt;header&gt;</strong> → visible content header section</li></ul>" },
        { "q": "How to specify character encoding?", "a": "<code>&lt;meta charset=\\\"UTF-8\\\"&gt;</code>" },
        { "q": "What are custom data attributes?", "a": "Attributes starting with `data-` used for custom data storage." },
        { "q": "How to create an image map?", "a": "<pre><code>&lt;img src=\\\"map.jpg\\\" usemap=\\\"#workmap\\\"&gt;\\n&lt;map name=\\\"workmap\\\"&gt;\\n  &lt;area shape=\\\"rect\\\" coords=\\\"34,44,270,350\\\" href=\\\"page.html\\\"&gt;\\n&lt;/map&gt;</code></pre>" },
        { "q": "What’s the difference between <bdo> and <bdi>?", "a": "<ul><li><strong>&lt;bdo&gt;</strong> → controls text direction</li><li><strong>&lt;bdi&gt;</strong> → isolates text directionality (useful for multilingual sites)</li></ul>" },
        { "q": "What’s the difference between <noscript> and <script>?", "a": "<code>&lt;noscript&gt;</code> displays alternate content when JS is disabled." },
        { "q": "How does HTML5 handle offline web applications?", "a": "Using Application Cache (deprecated) or Service Workers (modern)." },
        { "q": "What’s the purpose of <template>?", "a": "Stores HTML that can be cloned via JS dynamically." },
        { "q": "What’s ARIA in HTML?", "a": "Accessible Rich Internet Applications — adds roles and labels for screen readers." },
        { "q": "What’s the difference between <span> and <label>?", "a": "<code>&lt;span&gt;</code> is generic inline; <code>&lt;label&gt;</code> associates text with form controls." },
        { "q": "How to create tooltips in HTML?", "a": "Using the `title` attribute: <code>&lt;p title=\\\"I’m a tooltip\\\"&gt;Hover me!&lt;/p&gt;</code>" },
        { "q": "What’s the difference between absolute and relative URLs?", "a": "<ul><li><strong>Absolute:</strong> full link (https://openai.com)</li><li><strong>Relative:</strong> local path (/about.html)</li></ul>" },
        { "q": "What are meta viewport units?", "a": "Used for responsive design: vw, vh (1% of viewport width/height)." },
        { "q": "What is the <dialog> element?", "a": "Creates pop-up dialogs: <code>&lt;dialog open&gt;This is a dialog&lt;/dialog&gt;</code>" },
        { "q": "What are web workers?", "a": "Background scripts that run parallel to the main thread for performance." },
        { "q": "What are microdata attributes?", "a": "They help search engines understand page data. Example: `itemscope`, `itemtype`, `itemprop`." },
        { "q": "How to make content editable in HTML?", "a": "<code>&lt;div contenteditable=\\\"true\\\"&gt;Edit me!&lt;/div&gt;</code>" },
        { "q": "What’s the purpose of the <mark> tag?", "a": "Highlights text: <code>&lt;p&gt;Welcome to &lt;mark&gt;Taskly&lt;/mark&gt; App&lt;/p&gt;</code>" },
        { "q": "What’s the difference between <nav> and <menu>?", "a": "<ul><li><strong>&lt;nav&gt;:</strong> navigation links</li><li><strong>&lt;menu&gt;:</strong> command list or context menu</li></ul>" }
    ],
    "CSS3": [
        { "q": "What is CSS?", "a": "Cascading Style Sheets (CSS) is used to style HTML elements — colors, fonts, layouts, spacing, etc." },
        { "q": "Difference between inline, internal, and external CSS?", "a": "<ul><li><strong>Inline:</strong> <code>&lt;p style=\\\"color:red\\\"&gt;Text&lt;/p&gt;</code></li><li><strong>Internal:</strong> <code>&lt;style&gt;</code> inside <code>&lt;head&gt;</code></li><li><strong>External:</strong> linked via <code>&lt;link rel=\\\"stylesheet\\\" href=\\\"style.css\\\"&gt;</code></li></ul>" },
        { "q": "What are the different types of CSS selectors?", "a": "Universal <code>*</code>, Type <code>p</code>, Class <code>.class</code>, ID <code>#id</code>, Attribute <code>[type=\\\"text\\\"]</code>, Pseudo-class <code>:hover</code>, Pseudo-element <code>::before</code>" },
        { "q": "What is the difference between relative, absolute, fixed, and sticky positioning?", "a": "<table class='custom-table'><thead><tr><th>Type</th><th>Behavior</th></tr></thead><tbody><tr><td>relative</td><td>relative to normal position</td></tr><tr><td>absolute</td><td>relative to nearest positioned ancestor</td></tr><tr><td>fixed</td><td>relative to viewport (always stays)</td></tr><tr><td>sticky</td><td>toggles between relative and fixed</td></tr></tbody></table>" },
        { "q": "What is the difference between inline, block, and inline-block elements?", "a": "<ul><li><strong>Block:</strong> takes full width (<code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>)</li><li><strong>Inline:</strong> takes only content width (<code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>)</li><li><strong>Inline-block:</strong> inline element with block properties</li></ul>" },
        { "q": "What is the difference between em and rem units?", "a": "<ul><li><strong>em</strong> → relative to parent element font-size</li><li><strong>rem</strong> → relative to root font-size (<code>&lt;html&gt;</code>)</li></ul>" },
        { "q": "Difference between absolute and relative units?", "a": "<ul><li><strong>Absolute:</strong> <code>px</code>, <code>pt</code> → fixed size</li><li><strong>Relative:</strong> <code>%</code>, <code>em</code>, <code>rem</code> → scales with parent/root</li></ul>" },
        { "q": "What is the difference between id and class selectors?", "a": "<ul><li><strong>id</strong> → unique, single element (<code>#id</code>)</li><li><strong>class</strong> → multiple elements (<code>.class</code>)</li></ul>" },
        { "q": "What are pseudo-classes?", "a": "Styles applied on element state. <pre><code>a:hover { color: red; }</code></pre>" },
        { "q": "What are pseudo-elements?", "a": "Styles applied to part of elements. <pre><code>p::first-letter { font-size: 2em; }</code></pre>" },
        { "q": "Difference between visibility:hidden and display:none?", "a": "<ul><li><strong>visibility:hidden</strong> → element invisible but occupies space</li><li><strong>display:none</strong> → element removed from layout</li></ul>" },
        { "q": "Difference between position:fixed and position:sticky?", "a": "<ul><li><strong>fixed</strong> → stays relative to viewport</li><li><strong>sticky</strong> → behaves relative until scroll reaches threshold</li></ul>" },
        { "q": "What are media queries?", "a": "Used for responsive design. <pre><code>@media (max-width: 768px) {\\n  body { background: lightblue; }\\n}</code></pre>" },
        { "q": "What is z-index?", "a": "Controls stacking order of positioned elements. Higher = on top." },
        { "q": "How to center an element vertically & horizontally?", "a": "Using flex: <pre><code>.parent {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}</code></pre>" },
        { "q": "What are CSS transitions?", "a": "Smoothly animate CSS property changes. <pre><code>div { transition: all 0.5s ease; }\\ndiv:hover { background: red; }</code></pre>" },
        { "q": "What are CSS animations?", "a": "Keyframe animations over time: <pre><code>@keyframes slide {\\n  from { left: 0; } to { left: 100px; }\\n}\\ndiv { animation: slide 2s infinite; }</code></pre>" },
        { "q": "Difference between min-width and max-width?", "a": "<ul><li><strong>min-width</strong> → sets minimum allowed width</li><li><strong>max-width</strong> → sets maximum allowed width</li></ul>" },
        { "q": "Difference between px, em, rem, %?", "a": "<ul><li><strong>px</strong> → absolute pixels</li><li><strong>em</strong> → relative to parent</li><li><strong>rem</strong> → relative to root</li><li><strong>%</strong> → relative to parent container</li></ul>" },
        { "q": "How do you make a responsive image?", "a": "<code>img { max-width: 100%; height: auto; }</code>" },
        { "q": "What are the differences between CSS Grid and Flexbox?", "a": "<table class='custom-table'><thead><tr><th>Flexbox</th><th>Grid</th></tr></thead><tbody><tr><td>1D layout</td><td>2D layout</td></tr><tr><td>Content alignment</td><td>Row + column control</td></tr><tr><td>Simpler</td><td>Complex layouts</td></tr><tr><td>Items aligned along main axis</td><td>Both axes</td></tr></tbody></table>" },
        { "q": "Difference between vh/vw and %?", "a": "<ul><li><strong>vh/vw</strong> → viewport units</li><li><strong>%</strong> → relative to parent container</li></ul>" },
        { "q": "How to create a fixed navigation bar?", "a": "<code>nav { position: fixed; top: 0; width: 100%; }</code>" },
        { "q": "What are box model properties?", "a": "Content → padding → border → margin. They control spacing and layout." },
        { "q": "What are CSS variables?", "a": "Custom properties prefixed with <code>--</code>. <pre><code>:root { --main-color: red; }\\np { color: var(--main-color); }</code></pre>" },
        { "q": "What are CSS filters?", "a": "Apply visual effects on images/elements. <code>img { filter: grayscale(100%); }</code>" },
        { "q": "What are CSS gradients?", "a": "Linear or radial color transitions: <code>background: linear-gradient(to right, red, yellow);</code>" },
        { "q": "How to create animations using keyframes?", "a": "<pre><code>@keyframes bounce { 0%{top:0} 50%{top:50px} 100%{top:0} }\\ndiv { animation: bounce 2s infinite; }</code></pre>" },
        { "q": "What are flexbox properties?", "a": "<code>display: flex</code>, <code>flex-direction</code>, <code>justify-content</code>, <code>align-items</code>, <code>flex-wrap</code>, <code>order</code>, <code>flex-grow</code>, <code>flex-shrink</code>" },
        { "q": "How to use CSS Grid for layout?", "a": "<code>.container { display: grid; grid-template-columns: 1fr 2fr 1fr; grid-gap: 10px; }</code>" }
    ],
    "JavaScript": [
        { "q": "What is JavaScript?", "a": "JavaScript is a high-level, interpreted scripting language used to make web pages interactive." },
        { "q": "Difference between var, let, and const?", "a": "<table class='custom-table'><thead><tr><th>Keyword</th><th>Scope</th><th>Hoisting</th><th>Reassignable</th></tr></thead><tbody><tr><td>var</td><td>function</td><td>yes</td><td>yes</td></tr><tr><td>let</td><td>block</td><td>no</td><td>yes</td></tr><tr><td>const</td><td>block</td><td>no</td><td>no</td></tr></tbody></table>" },
        { "q": "What is hoisting in JavaScript?", "a": "Variables and function declarations are moved to the top of their scope during execution. <pre><code>console.log(a); // undefined\\nvar a = 5;</code></pre>" },
        { "q": "Difference between == and ===?", "a": "<ul><li><strong>==</strong> → value equality (type coercion)</li><li><strong>===</strong> → value + type equality</li></ul>" },
        { "q": "What is the difference between null and undefined?", "a": "<ul><li><strong>null</strong> → intentionally empty value</li><li><strong>undefined</strong> → variable declared but not assigned</li></ul>" },
        { "q": "What are JavaScript data types?", "a": "Primitive → string, number, boolean, null, undefined, symbol, bigint. Non-primitive → object, array, function" },
        { "q": "Difference between function and arrow functions?", "a": "Arrow functions do not have their own `this`, cannot be used as constructors, and have a shorter syntax." },
        { "q": "What are JavaScript objects?", "a": "Key-value pairs storing data and functions: <code>const person = { name: \\\"Akash\\\", age: 21 };</code>" },
        { "q": "Difference between function declaration and function expression?", "a": "Declaration → hoisted. Expression → not hoisted, can be anonymous." },
        { "q": "What is the difference between call, apply, and bind?", "a": "<pre><code>func.call(obj, arg1, arg2)   // immediately calls\\nfunc.apply(obj, [arg1, arg2]) // immediately calls with array\\nfunc.bind(obj)                 // returns new function</code></pre>" },
        { "q": "What is an IIFE (Immediately Invoked Function Expression)?", "a": "<code>(function(){ console.log(\\\"IIFE\\\"); })();</code> Executes immediately, useful to avoid global scope pollution." },
        { "q": "What are template literals?", "a": "Backticks for multi-line strings and interpolation. <pre><code>const name = \\\"Akash\\\";\\nconsole.log(`Hello, ${name}`);</code></pre>" },
        { "q": "Difference between for..in and for..of?", "a": "<ul><li><strong>for..in</strong> → keys of object/array</li><li><strong>for..of</strong> → values of iterable</li></ul>" },
        { "q": "What is the DOM?", "a": "Document Object Model — tree structure representing HTML elements for manipulation via JS." },
        { "q": "How to select an element in JS?", "a": "<pre><code>document.getElementById(\\\"id\\\");\\ndocument.querySelector(\\\".class\\\");\\ndocument.getElementsByTagName(\\\"p\\\");</code></pre>" },
        { "q": "How to add an event listener?", "a": "<code>element.addEventListener(\\\"click\\\", function() { console.log(\\\"Clicked\\\"); });</code>" },
        { "q": "What is event bubbling and capturing?", "a": "<ul><li><strong>Bubbling</strong> → event propagates from target → parent → root</li><li><strong>Capturing</strong> → event propagates root → parent → target</li></ul>" },
        { "q": "How to stop event propagation?", "a": "<code>event.stopPropagation();</code>" },
        { "q": "Difference between preventDefault() and stopPropagation()?", "a": "<ul><li><strong>preventDefault</strong> → prevent default browser action</li><li><strong>stopPropagation</strong> → stop event from bubbling/capturing</li></ul>" },
        { "q": "How to change HTML content using JS?", "a": "<code>document.getElementById(\\\"demo\\\").innerHTML = \\\"Hello World\\\";</code>" },
        { "q": "How to change CSS via JS?", "a": "<code>element.style.color = \\\"red\\\";</code>" },
        { "q": "How to create and remove elements dynamically?", "a": "<pre><code>let div = document.createElement(\\\"div\\\");\\nparent.appendChild(div);\\nparent.removeChild(div);</code></pre>" },
        { "q": "What is event delegation?", "a": "Attach a single event listener to a parent for dynamically added child elements." },
        { "q": "What are let and const?", "a": "Block-scoped variables; `const` is for immutable references." },
        { "q": "What is destructuring?", "a": "Extract array/object values into variables. <pre><code>const [a,b] = [1,2];\\nconst {name, age} = person;</code></pre>" },
        { "q": "What are default parameters?", "a": "<code>function greet(name=\\\"Akash\\\"){ console.log(name); }</code>" },
        { "q": "What are rest and spread operators?", "a": "<pre><code>function sum(...args){}   // rest\\nlet arr2 = [...arr1];     // spread</code></pre>" },
        { "q": "What are promises?", "a": "Objects representing future completion/failure of async tasks. <code>let p = new Promise((resolve, reject) => { resolve(5); });</code>" },
        { "q": "Difference between promise chaining and async/await?", "a": "Chaining → <code>.then().catch()</code>. Async/await → synchronous-like syntax, cleaner." },
        { "q": "What is Map vs Object?", "a": "Map → keys can be any type, preserves insertion order. Object → key must be string/symbol, unordered." },
        { "q": "Difference between Set and Array?", "a": "Set → unique values only. Array → duplicates allowed." },
        { "q": "What is closure in JS?", "a": "Function retaining access to variables from its outer scope.<pre><code>function outer() {\\n  let count = 0;\\n  return function inner(){ count++; console.log(count); }\\n}</code></pre>" },
        { "q": "What is the difference between synchronous and asynchronous JS?", "a": "Sync → executes line by line. Async → executes later (setTimeout, AJAX, promises)." },
        { "q": "What are async/await?", "a": "Syntactic sugar for promises: <code>async function fetchData(){ let res = await fetch(url); }</code>" },
        { "q": "Difference between call stack and event loop?", "a": "Call stack → executes functions. Event loop → handles async tasks (callbacks, promises)." },
        { "q": "What is 'this' keyword in JS?", "a": "Refers to current execution context. Behavior changes based on function type." },
        { "q": "Difference between arrow function 'this' and normal function 'this'?", "a": "Arrow → lexically bound to outer context. Normal → depends on caller." },
        { "q": "What is a JavaScript prototype?", "a": "All JS objects inherit properties/methods from their prototype object." },
        { "q": "What is the difference between setTimeout and setInterval?", "a": "<code>setTimeout</code> → executes once after delay. <code>setInterval</code> → executes repeatedly after delay." }
    ],
    "Bootstrap": [
        { "q": "What is Bootstrap?", "a": "Bootstrap is a popular frontend framework for building responsive, mobile-first websites using CSS, JS, and prebuilt components." },
        { "q": "What are the main features of Bootstrap?", "a": "<ul><li>Responsive grid system</li><li>Predefined CSS classes</li><li>Components: buttons, navbars, forms, modals</li><li>JavaScript plugins: carousel, modal, tooltip</li><li>Utilities for spacing, colors, and typography</li></ul>" },
        { "q": "Difference between Bootstrap 4 and 5?", "a": "Bootstrap 5 removed the jQuery dependency, uses new utilities (gutters, spacing), and improved grid and form components." },
        { "q": "How do you include Bootstrap in a project?", "a": "CDN: <pre><code>&lt;link href=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\"&gt;\\n&lt;script src=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\\\"&gt;&lt;/script&gt;</code></pre>Or download and link locally." },
        { "q": "What is the difference between .container and .container-fluid?", "a": "<ul><li><strong>.container</strong> → fixed width responsive</li><li><strong>.container-fluid</strong> → full width, spans entire viewport</li></ul>" },
        { "q": "What are breakpoints in Bootstrap?", "a": "Breakpoints define responsive layout thresholds: xs (<576px), sm (≥576px), md (≥768px), lg (≥992px), xl (≥1200px), xxl (≥1400px)" },
        { "q": "What is the Bootstrap grid system?", "a": "12-column responsive layout using <code>.row</code> and <code>.col-*</code> classes." },
        { "q": "Difference between .row and .col?", "a": "<ul><li><strong>.row</strong> → creates horizontal group of columns</li><li><strong>.col</strong> → defines column width inside a row</li></ul>" },
        { "q": "How to make a column span multiple columns?", "a": "<code>&lt;div class=\\\"col-md-6\\\"&gt;Half width&lt;/div&gt;</code>" },
        { "q": "What are Bootstrap utility classes?", "a": "Predefined classes for spacing, colors, display, typography, and flexbox: <code>&lt;p class=\\\"text-center text-primary m-3\\\"&gt;Hello&lt;/p&gt;</code>" },
        { "q": "What is the difference between .d-none and .invisible?", "a": "<ul><li><strong>.d-none</strong> → element removed from layout</li><li><strong>.invisible</strong> → element hidden but occupies space</li></ul>" },
        { "q": "How to make an element visible only on specific screen sizes?", "a": "<code>&lt;div class=\\\"d-none d-md-block\\\"&gt;Visible on md+ screens&lt;/div&gt;</code>" },
        { "q": "What is a responsive image in Bootstrap?", "a": "Use <code>.img-fluid</code> → scales image to parent container: <code>&lt;img src=\\\"image.jpg\\\" class=\\\"img-fluid\\\"&gt;</code>" },
        { "q": "Difference between .btn and .btn-primary?", "a": "<ul><li><strong>.btn</strong> → base button styling</li><li><strong>.btn-primary</strong> → primary theme color applied</li></ul>" },
        { "q": "How to create a navbar in Bootstrap?", "a": "<pre><code>&lt;nav class=\\\"navbar navbar-expand-lg navbar-light bg-light\\\"&gt;\\n  &lt;a class=\\\"navbar-brand\\\" href=\\\"#\\\"&gt;Brand&lt;/a&gt;\\n&lt;/nav&gt;</code></pre>" },
        { "q": "What is the difference between .navbar-expand-lg and .navbar-expand-md?", "a": "Defines at which breakpoint the navbar becomes horizontal vs collapsed." },
        { "q": "How to create a responsive dropdown menu?", "a": "<pre><code>&lt;li class=\\\"nav-item dropdown\\\"&gt;\\n  &lt;a class=\\\"nav-link dropdown-toggle\\\" data-bs-toggle=\\\"dropdown\\\"&gt;Menu&lt;/a&gt;\\n  &lt;ul class=\\\"dropdown-menu\\\"&gt;\\n    &lt;li&gt;&lt;a class=\\\"dropdown-item\\\"&gt;Item&lt;/a&gt;&lt;/li&gt;\\n  &lt;/ul&gt;\\n&lt;/li&gt;</code></pre>" },
        { "q": "What is the difference between .row and .g-0?", "a": "<ul><li><strong>.row</strong> → adds default gutters</li><li><strong>.g-0</strong> → removes spacing between columns</li></ul>" },
        { "q": "How to create a responsive table in Bootstrap?", "a": "<pre><code>&lt;div class=\\\"table-responsive\\\"&gt;\\n  &lt;table class=\\\"table\\\"&gt;...&lt;/table&gt;\\n&lt;/div&gt;</code></pre>" },
        { "q": "Difference between .text-center and .mx-auto?", "a": "<ul><li><strong>.text-center</strong> → centers text inside element</li><li><strong>.mx-auto</strong> → centers block-level element horizontally</li></ul>" },
        { "q": "How to use Bootstrap forms?", "a": "<code>&lt;form&gt;&lt;input class=\\\"form-control\\\" type=\\\"text\\\"&gt;&lt;/form&gt;</code>" },
        { "q": "What are form-floating labels?", "a": "Labels float above input fields: <pre><code>&lt;div class=\\\"form-floating\\\"&gt;\\n  &lt;input class=\\\"form-control\\\" id=\\\"name\\\" placeholder=\\\"Name\\\"&gt;\\n  &lt;label for=\\\"name\\\"&gt;Name&lt;/label&gt;\\n&lt;/div&gt;</code></pre>" },
        { "q": "How to create a modal in Bootstrap?", "a": "Trigger with `data-bs-toggle=\\\"modal\\\"` and `data-bs-target=\\\"#myModal\\\"` <pre><code>&lt;div class=\\\"modal\\\" id=\\\"myModal\\\"&gt;\\n  &lt;div class=\\\"modal-dialog\\\"&gt;\\n    &lt;div class=\\\"modal-content\\\"&gt;Modal Content&lt;/div&gt;\\n  &lt;/div&gt;\\n&lt;/div&gt;</code></pre>" },
        { "q": "How to create a Bootstrap card?", "a": "<pre><code>&lt;div class=\\\"card\\\" style=\\\"width: 18rem;\\\"&gt;\\n  &lt;img class=\\\"card-img-top\\\" src=\\\"img.jpg\\\"&gt;\\n  &lt;div class=\\\"card-body\\\"&gt;&lt;p class=\\\"card-text\\\"&gt;Card content&lt;/p&gt;&lt;/div&gt;\\n&lt;/div&gt;</code></pre>" },
        { "q": "How to create a responsive carousel?", "a": "<pre><code>&lt;div id=\\\"carouselExample\\\" class=\\\"carousel slide\\\"&gt;\\n  &lt;div class=\\\"carousel-inner\\\"&gt;\\n    &lt;div class=\\\"carousel-item active\\\"&gt;&lt;img src=\\\"img1.jpg\\\"&gt;&lt;/div&gt;\\n    &lt;div class=\\\"carousel-item\\\"&gt;&lt;img src=\\\"img2.jpg\\\"&gt;&lt;/div&gt;\\n  &lt;/div&gt;\\n&lt;/div&gt;</code></pre>" },
        { "q": "How to add tooltips in Bootstrap 5?", "a": "<pre><code>&lt;button data-bs-toggle=\\\"tooltip\\\" title=\\\"Tooltip text\\\"&gt;Hover me&lt;/button&gt;\\n&lt;script&gt;var tooltip = new bootstrap.Tooltip(document.querySelector('[data-bs-toggle=\\\"tooltip\\\"]'));&lt;/script&gt;</code></pre>" },
        { "q": "How to create badges in Bootstrap?", "a": "<code>&lt;span class=\\\"badge bg-primary\\\"&gt;4&lt;/span&gt;</code>" },
        { "q": "How to create alerts in Bootstrap?", "a": "<code>&lt;div class=\\\"alert alert-success\\\"&gt;Success message&lt;/div&gt;</code>" },
        { "q": "How to dismiss alerts?", "a": "Add <code>.alert-dismissible</code> and a close button with <code>data-bs-dismiss=\\\"alert\\\"</code>." },
        { "q": "How to create responsive spacing?", "a": "Use spacing utilities: <code>.m-3</code> → margin, <code>.p-2</code> → padding, <code>mx-auto</code> → horizontal centering" },
        { "q": "How to create a vertical nav using Bootstrap?", "a": "<pre><code>&lt;ul class=\\\"nav flex-column\\\"&gt;\\n  &lt;li class=\\\"nav-item\\\"&gt;&lt;a class=\\\"nav-link\\\" href=\\\"#\\\"&gt;Link&lt;/a&gt;&lt;/li&gt;\\n&lt;/ul&gt;</code></pre>" },
        { "q": "How to use Bootstrap icons?", "a": "Include Bootstrap Icons CDN: <code>&lt;i class=\\\"bi bi-alarm\\\"&gt;&lt;/i&gt;</code>" },
        { "q": "Difference between .collapse and .accordion?", "a": "<ul><li><strong>.collapse</strong> → toggles visibility</li><li><strong>.accordion</strong> → structured collapsible items</li></ul>" },
        { "q": "How to use Bootstrap grid offset classes?", "a": "<code>&lt;div class=\\\"col-md-4 offset-md-2\\\"&gt;Column&lt;/div&gt;</code>" },
        { "q": "How to use Bootstrap responsive embed?", "a": "<code>&lt;div class=\\\"ratio ratio-16x9\\\"&gt;&lt;iframe src=\\\"video.mp4\\\"&gt;&lt;/iframe&gt;&lt;/div&gt;</code>" }
    ],
     "OS": [
        { "q": "What is an Operating System?", "a": "An Operating System (OS) is system software that manages hardware and software resources of a computer and provides an environment for application programs to run efficiently." },
        { "q": "What are the main functions of an Operating System?", "a": "<ul><li>Process management</li><li>Memory management</li><li>File management</li><li>Device management</li><li>Security & protection</li><li>User interface management</li></ul>" },
        { "q": "What are the types of Operating Systems?", "a": "<ul><li>Batch OS</li><li>Time-sharing OS</li><li>Distributed OS</li><li>Real-time OS</li><li>Embedded OS</li><li>Clustered OS</li></ul>" },
        { "q": "Difference between Multitasking, Multiprogramming, and Multiprocessing.", "a": "<ul><li><strong>Multiprogramming:</strong> Multiple programs in memory; one executes at a time.</li><li><strong>Multitasking:</strong> CPU switches quickly among tasks.</li><li><strong>Multiprocessing:</strong> Multiple CPUs execute processes simultaneously.</li></ul>" },
        { "q": "What is a kernel?", "a": "The kernel is the core component of an OS that directly interacts with hardware and manages system resources." },
        { "q": "Difference between User Mode and Kernel Mode.", "a": "<ul><li><strong>User Mode:</strong> Limited access; used by applications.</li><li><strong>Kernel Mode:</strong> Full hardware access; used by OS services.</li></ul>" },
        { "q": "What are system calls?", "a": "System calls are interfaces between user programs and the OS kernel for services like file operations, process creation, etc." },
        { "q": "Example of a System Call.", "a": "<code>fork()</code>, <code>exec()</code>, <code>read()</code>, <code>write()</code>, <code>open()</code>, <code>close()</code>." },
        { "q": "What is a Process?", "a": "A process is a program in execution. It includes code, data, stack, and program counter." },
        { "q": "Different states of a process.", "a": "<ul><li>New</li><li>Ready</li><li>Running</li><li>Waiting (Blocked)</li><li>Terminated</li></ul>" },
        { "q": "What is Process Control Block (PCB)?", "a": "PCB is a data structure that stores process information like PID, program counter, registers, scheduling info, etc." },
        { "q": "What are schedulers in OS?", "a": "<ul><li><strong>Long-term scheduler:</strong> Controls degree of multiprogramming.</li><li><strong>Short-term scheduler:</strong> Selects process for execution.</li><li><strong>Medium-term scheduler:</strong> Handles swapping.</li></ul>" },
        { "q": "What is the difference between Process and Thread?", "a": "<ul><li>Process has its own memory space; thread shares process memory.</li><li>Thread creation is faster than process creation.</li></ul>" },
        { "q": "Types of Threads.", "a": "<ul><li>User-level threads</li><li>Kernel-level threads</li></ul>" },
        { "q": "What is CPU Scheduling?", "a": "CPU scheduling decides which ready process gets CPU time next." },
        { "q": "What are Preemptive and Non-preemptive Scheduling?", "a": "<ul><li><strong>Preemptive:</strong> CPU can be taken away from a running process.</li><li><strong>Non-preemptive:</strong> Once CPU assigned, process completes voluntarily.</li></ul>" },
        { "q": "What are scheduling criteria?", "a": "<ul><li>CPU Utilization</li><li>Throughput</li><li>Turnaround Time</li><li>Waiting Time</li><li>Response Time</li></ul>" },
        { "q": "Explain FCFS Scheduling.", "a": "First Come First Serve; non-preemptive. Processes executed in order of arrival. Simple but causes convoy effect." },
        { "q": "Explain Shortest Job First (SJF) Scheduling.", "a": "Process with shortest burst time runs first. Optimal for waiting time but hard to predict burst time." },
        { "q": "What is Round Robin Scheduling?", "a": "Each process gets CPU for a fixed time quantum. Suitable for time-sharing systems." },
        { "q": "Explain Priority Scheduling.", "a": "Each process assigned priority. High priority → executed first. Can cause starvation." },
        { "q": "What is Multilevel Queue Scheduling?", "a": "Processes divided into queues (foreground/background) with different algorithms per queue." },
        { "q": "What is Multilevel Feedback Queue?", "a": "Similar to multilevel queue but allows movement between queues based on behavior." },
        { "q": "What is Process Synchronization?", "a": "Coordination between processes to ensure correct execution when sharing data." },
        { "q": "What is Race Condition?", "a": "When multiple processes access shared data concurrently, leading to unpredictable results." },
        { "q": "What is Critical Section?", "a": "Code segment accessing shared resources that must not be executed by more than one process at a time." },
        { "q": "What are the conditions for synchronization?", "a": "<ul><li>Mutual Exclusion</li><li>Progress</li><li>Bounded Waiting</li></ul>" },
        { "q": "What is a Semaphore?", "a": "Integer variable used to solve synchronization problems using two operations: wait() and signal()." },
        { "q": "Difference between Binary and Counting Semaphore.", "a": "<ul><li><strong>Binary Semaphore:</strong> Takes values 0 or 1 (mutex).</li><li><strong>Counting Semaphore:</strong> Can take multiple integer values (used for resources).</li></ul>" },
        { "q": "Explain Classical Synchronization Problems.", "a": "<ul><li>Producer–Consumer Problem</li><li>Readers–Writers Problem</li><li>Dining Philosophers Problem</li></ul>" },
        { "q": "What is a Deadlock?", "a": "Condition where processes are waiting for each other indefinitely for resources." },
        { "q": "What are necessary conditions for Deadlock?", "a": "<ul><li>Mutual Exclusion</li><li>Hold and Wait</li><li>No Preemption</li><li>Circular Wait</li></ul>" },
        { "q": "Methods for Handling Deadlock.", "a": "<ul><li>Prevention</li><li>Avoidance (Banker’s Algorithm)</li><li>Detection & Recovery</li><li>Ignorance (OS usually ignores)</li></ul>" },
        { "q": "What is Banker’s Algorithm?", "a": "Resource allocation algorithm that ensures the system never enters an unsafe state." },
        { "q": "What is a Safe State?", "a": "A state in which the system can allocate resources to all processes without causing a deadlock." },
        { "q": "What is Memory Management?", "a": "Process of managing memory allocation, protection, and swapping between main and secondary memory." },
        { "q": "Difference between Logical and Physical Address.", "a": "<ul><li><strong>Logical Address:</strong> Generated by CPU (virtual).</li><li><strong>Physical Address:</strong> Actual location in RAM.</li></ul>" },
        { "q": "What is Paging?", "a": "Memory management technique dividing memory into fixed-size blocks (pages & frames)." },
        { "q": "What is Fragmentation?", "a": "<ul><li><strong>Internal:</strong> Wasted space within partitions.</li><li><strong>External:</strong> Free memory scattered.</li></ul>" },
        { "q": "What is Segmentation?", "a": "Divides memory into variable-sized segments based on logical divisions (code, data, stack)." },
        { "q": "What is Virtual Memory?", "a": "Technique that allows execution of processes not fully in main memory using paging and disk space." },
        { "q": "What is Thrashing?", "a": "Condition where excessive paging/swapping reduces CPU utilization." },
        { "q": "Explain Page Replacement Algorithms.", "a": "<ul><li>FIFO (First In First Out)</li><li>Optimal</li><li>LRU (Least Recently Used)</li><li>MRU (Most Recently Used)</li></ul>" },
        { "q": "What is TLB (Translation Lookaside Buffer)?", "a": "A cache that stores recent translations of virtual to physical addresses." },
        { "q": "What is Disk Scheduling?", "a": "Technique to determine the order of servicing disk I/O requests for better efficiency." },
        { "q": "Explain major Disk Scheduling Algorithms.", "a": "<ul><li>FCFS: Simple but inefficient.</li><li>SSTF: Shortest seek time first.</li><li>SCAN: Moves head in one direction then reverses.</li><li>LOOK: Stops at last request in direction.</li><li>C-SCAN / C-LOOK: Circular versions improving fairness.</li></ul>" },
        { "q": "What is Seek Time, Rotational Latency, and Transfer Time?", "a": "<ul><li><strong>Seek Time:</strong> Move head to the right track.</li><li><strong>Rotational Latency:</strong> Wait for the sector to rotate.</li><li><strong>Transfer Time:</strong> Time to transfer data.</li></ul>" },
        { "q": "What is a File System?", "a": "The part of the OS that manages file creation, organization, storage, and access." },
        { "q": "What are File Attributes?", "a": "Name, Type, Size, Location, Permissions, Creation time, etc." },
        { "q": "Explain File Access Methods.", "a": "<ul><li>Sequential Access</li><li>Direct Access</li><li>Indexed Access</li></ul>" },
        { "q": "What are File Allocation Methods?", "a": "<ul><li>Contiguous Allocation</li><li>Linked Allocation</li><li>Indexed Allocation</li></ul>" },
        { "q": "What is an Inode in UNIX?", "a": "A data structure storing metadata (permissions, owner, size, etc.) about a file." },
        { "q": "What is Protection in OS?", "a": "Mechanism to control access of processes to system resources." },
        { "q": "What is Security in OS?", "a": "Defense against unauthorized access, viruses, or attacks." },
        { "q": "What are common Security Threats?", "a": "<ul><li>Virus</li><li>Worm</li><li>Trojan</li><li>Denial of Service (DoS)</li><li>Unauthorized Access</li></ul>" },
        { "q": "Difference between Monolithic Kernel and Microkernel.", "a": "<ul><li><strong>Monolithic:</strong> All OS services in one large kernel (Linux).</li><li><strong>Microkernel:</strong> Minimal kernel; rest as user processes (Mach).</li></ul>" },
        { "q": "What is Context Switching?", "a": "Process of saving the current process state and loading the next process state." },
        { "q": "What is Swapping?", "a": "Moving processes between main memory and disk to manage space." },
        { "q": "What is an Interrupt?", "a": "Signal to the CPU to stop the current task and execute an ISR (Interrupt Service Routine)." },
        { "q": "What is the difference between Paging and Segmentation?", "a": "<ul><li><strong>Paging:</strong> Fixed-size blocks.</li><li><strong>Segmentation:</strong> Variable-size logical blocks.</li></ul>" },
        { "q": "What is Belady’s Anomaly?", "a": "In FIFO page replacement, increasing the number of frames can sometimes increase the number of page faults." },
        { "q": "What are Real-time Systems?", "a": "Systems with strict timing constraints (e.g., flight control, pacemakers)." },
        { "q": "What is the difference between Deadlock and Starvation?", "a": "<ul><li><strong>Deadlock:</strong> A circular waiting for resources where no process can proceed.</li><li><strong>Starvation:</strong> A process is indefinitely postponed from getting resources due to low priority.</li></ul>" },
        { "q": "What are different types of OS Architectures?", "a": "<ul><li>Layered OS</li><li>Monolithic OS</li><li>Microkernel OS</li><li>Modular OS</li></ul>" },
        { "q": "What is Booting?", "a": "The process of loading the OS into memory from storage when the computer starts." },
        { "q": "What is a Context Switch and what happens during it?", "a": "A context switch is the process of saving the state of a currently running process and loading the state of the next process to run. During a context switch, CPU registers, Program Counter, and other state info are saved in the PCB, and the new process's state is loaded. Frequent context switches reduce performance due to overhead." },
        { "q": "What is the difference between Kernel Threads and User Threads?", "a": "<table class='custom-table'><thead><tr><th>Feature</th><th>User Threads</th><th>Kernel Threads</th></tr></thead><tbody><tr><td>Managed by</td><td>User-level library</td><td>Operating System</td></tr><tr><td>Speed</td><td>Faster (no kernel intervention)</td><td>Slower</td></tr><tr><td>Blocking</td><td>One thread block can block all in the process</td><td>Independent scheduling</td></tr><tr><td>Example</td><td>Java threads</td><td>Linux pthreads</td></tr></tbody></table>" },
        { "q": "What is a Critical Section and how do we protect it?", "a": "A Critical Section is a code segment where shared resources are accessed. Protection methods include: Mutex Locks, Semaphores, Monitors, and disabling interrupts (in kernel-level code)." },
        { "q": "What is a Reentrant Function?", "a": "A function that can be safely interrupted and re-entered by another thread is reentrant. It does not use static or global data, ensuring thread safety. Example: `strtok_r()` in C is reentrant; `strtok()` is not." },
        { "q": "What is the difference between Internal and External Fragmentation?", "a": "<ul><li><strong>Internal Fragmentation:</strong> Unused space inside allocated memory blocks.</li><li><strong>External Fragmentation:</strong> Unused space between allocated blocks (holes).</li></ul>Paging solves external fragmentation but causes internal fragmentation." },
        { "q": "What is a Working Set in Virtual Memory?", "a": "The set of pages actively used by a process during a given period of time. The OS uses this to decide how many pages to allocate to a process to reduce page faults." },
        { "q": "Explain Belady’s Anomaly.", "a": "In some page replacement algorithms (like FIFO), increasing the number of available frames can paradoxically increase the number of page faults. This is called Belady’s anomaly." },
        { "q": "What is Demand Paging?", "a": "A technique where pages are loaded into memory from the disk only when they are required (demanded), not all at once. It reduces memory usage and startup time but may cause page faults initially." },
        { "q": "Difference between Segmentation and Paging.", "a": "<table class='custom-table'><thead><tr><th>Feature</th><th>Paging</th><th>Segmentation</th></tr></thead><tbody><tr><td>Division</td><td>Fixed-size pages</td><td>Variable-size segments</td></tr><tr><td>Basis</td><td>Physical memory</td><td>Logical program structure</td></tr><tr><td>Fragmentation</td><td>Internal</td><td>External</td></tr><tr><td>Mapping</td><td>Page table</td><td>Segment table</td></tr></tbody></table>" },
        { "q": "What is the difference between Monolithic Kernel and Microkernel?", "a": "<table class='custom-table'><thead><tr><th>Feature</th><th>Monolithic</th><th>Microkernel</th></tr></thead><tbody><tr><td>Structure</td><td>All OS services in one kernel</td><td>Minimal kernel, rest in user space</td></tr><tr><td>Speed</td><td>Faster (less overhead)</td><td>Slower (message passing overhead)</td></tr><tr><td>Reliability</td><td>Less modular</td><td>More modular</td></tr><tr><td>Example</td><td>Linux</td><td>Minix, QNX</td></tr></tbody></table>" },
        { "q": "Explain Thrashing in OS.", "a": "Thrashing occurs when a process spends more time swapping pages in and out of memory than actually executing instructions, typically due to having insufficient frames allocated. This leads to a drastic drop in performance." },
        { "q": "What are Zombie and Orphan Processes?", "a": "<ul><li><strong>Zombie Process:</strong> A process that has finished execution, but its parent has not yet read its exit status, so it remains in the process table.</li><li><strong>Orphan Process:</strong> A process whose parent has terminated before it. In Unix-like systems, an orphan process is adopted by the `init` process (PID 1).</li></ul>" }
    ],
      "SE": [
        { "q": "What is Software Engineering?", "a": "Software Engineering is the systematic approach to the design, development, testing, deployment, and maintenance of software using engineering principles." },
        { "q": "What is the difference between Software Engineering and Programming?", "a": "<table class='custom-table'><thead><tr><th>Aspect</th><th>Software Engineering</th><th>Programming</th></tr></thead><tbody><tr><td>Focus</td><td>Process + Management + Quality</td><td>Code implementation</td></tr><tr><td>Output</td><td>Reliable, maintainable product</td><td>Working code only</td></tr></tbody></table>" },
        { "q": "What are the characteristics of good software?", "a": "<ul><li>Functionality</li><li>Reliability</li><li>Usability</li><li>Efficiency</li><li>Maintainability</li><li>Portability</li></ul>" },
        { "q": "Define SDLC.", "a": "Software Development Life Cycle (SDLC) is a step-by-step process used to design, develop, and maintain software efficiently." },
        { "q": "What are the phases of SDLC?", "a": "<ul><li>Requirement Analysis</li><li>System Design</li><li>Implementation</li><li>Testing</li><li>Deployment</li><li>Maintenance</li></ul>" },
        { "q": "What are functional and non-functional requirements?", "a": "<ul><li><strong>Functional:</strong> Describe what the system should do (features).</li><li><strong>Non-functional:</strong> Describe quality attributes (performance, security, usability).</li></ul>" },
        { "q": "What is a feasibility study?", "a": "It checks whether a project is technically, economically, and operationally possible before development begins." },
        { "q": "What is SRS?", "a": "Software Requirements Specification — a detailed document describing software’s functional and non-functional requirements." },
        { "q": "What are the qualities of a good SRS?", "a": "<ul><li>Complete</li><li>Consistent</li><li>Verifiable</li><li>Unambiguous</li><li>Modifiable</li></ul>" },
        { "q": "Difference between verification and validation.", "a": "<ul><li><strong>Verification:</strong> Are we building the product right? (Checks against specifications)</li><li><strong>Validation:</strong> Are we building the right product? (Checks against user needs)</li></ul>" },
        { "q": "What is software prototyping?", "a": "It’s a preliminary version of software used to understand requirements and validate design early." },
        { "q": "What are software process models?", "a": "Models that define structured approaches for software development, e.g., Waterfall, Spiral, Agile, V-Model, Incremental." },
        { "q": "What is the Waterfall model?", "a": "A linear, sequential model where each phase must be completed before moving to the next." },
        { "q": "Disadvantages of Waterfall model?", "a": "<ul><li>No flexibility</li><li>Hard to handle changing requirements</li><li>Late testing phase</li></ul>" },
        { "q": "What is the Spiral model?", "a": "Combines iterative development with risk analysis; focuses on risk management in each phase." },
        { "q": "What is the Incremental model?", "a": "Software is built and delivered in small increments or modules, each adding functionality." },
        { "q": "What is the Agile model?", "a": "A flexible and iterative approach where requirements and solutions evolve through collaboration between teams." },
        { "q": "Difference between Agile and Waterfall?", "a": "<table class='custom-table'><thead><tr><th>Feature</th><th>Waterfall</th><th>Agile</th></tr></thead><tbody><tr><td>Process</td><td>Sequential</td><td>Iterative</td></tr><tr><td>Testing</td><td>At end</td><td>Continuous</td></tr><tr><td>Flexibility</td><td>Rigid</td><td>Highly adaptable</td></tr></tbody></table>" },
        { "q": "What are the core values of Agile?", "a": "<ul><li>Individuals and interactions over processes and tools</li><li>Working software over comprehensive documentation</li><li>Customer collaboration over contract negotiation</li><li>Responding to change over following a plan</li></ul>" },
        { "q": "What are software metrics?", "a": "Quantitative measures of software quality or process performance (e.g., LOC, cyclomatic complexity, defect density)." },
        { "q": "What is a CASE tool?", "a": "Computer-Aided Software Engineering tools automate parts of software development like design, coding, and testing." },
        { "q": "What is software reusability?", "a": "The ability to use existing software components in new applications with little or no modification." },
        { "q": "What is coupling and cohesion?", "a": "<ul><li><strong>Cohesion:</strong> How closely related the functions within a module are. (High cohesion = good)</li><li><strong>Coupling:</strong> How dependent modules are on each other. (Low coupling = good)</li></ul>" },
        { "q": "What is modularity in software design?", "a": "Dividing a system into independent modules that can be developed and tested separately." },
        { "q": "What is software reliability?", "a": "The probability that software performs its intended function correctly for a specified period under stated conditions." },
        { "q": "What is software design?", "a": "It’s the process of defining the architecture, components, interfaces, and data for a system." },
        { "q": "What are the levels of design?", "a": "<ul><li>High-Level Design (Architectural)</li><li>Low-Level Design (Detailed Design)</li></ul>" },
        { "q": "What is a DFD (Data Flow Diagram)?", "a": "A graphical representation showing the flow of data between processes, data stores, and external entities." },
        { "q": "What are the symbols used in DFD?", "a": "<ul><li>Process (Circle)</li><li>Data Flow (Arrow)</li><li>Data Store (Two parallel lines)</li><li>External Entity (Rectangle)</li></ul>" },
        { "q": "What is an ER Diagram?", "a": "An Entity-Relationship Diagram represents entities, their attributes, and the relationships between them in a database." },
        { "q": "What is UML?", "a": "Unified Modeling Language — a standard graphical language for modeling, designing, and documenting software systems visually." },
        { "q": "What are common UML diagrams?", "a": "<ul><li>Use Case Diagram</li><li>Class Diagram</li><li>Sequence Diagram</li><li>Activity Diagram</li><li>State Diagram</li><li>Component Diagram</li></ul>" },
        { "q": "What is an activity diagram?", "a": "Represents the workflow of activities and actions in a system — similar to a flowchart." },
        { "q": "What is a sequence diagram?", "a": "Shows the interaction between objects in a sequential order, illustrating how messages are passed between them over time." },
        { "q": "What is object-oriented design (OOD)?", "a": "A design methodology based on objects, classes, inheritance, polymorphism, and encapsulation." },
        { "q": "What is a design pattern?", "a": "A reusable, well-documented solution to a common software design problem, e.g., Singleton, Factory, Observer." },
        { "q": "Explain the Singleton pattern.", "a": "A design pattern that ensures only one instance of a class exists and provides a global access point to it." },
        { "q": "What is a class and object in SE terms?", "a": "A class is a blueprint or template. An object is a runnable instance of a class." },
        { "q": "Explain coupling types.", "a": "Types from best to worst: Data, Stamp, Control, Common, Content Coupling." },
        { "q": "What are different cohesion types?", "a": "Types from best to worst: Functional, Sequential, Communicational, Procedural, Temporal, Logical, Coincidental." },
        { "q": "What is refactoring?", "a": "Improving the internal structure of existing code without changing its external behavior, aiming to enhance readability and maintainability." },
        { "q": "What is software architecture?", "a": "Defines the high-level structure and organization of software components and their interactions." },
        { "q": "What is client-server architecture?", "a": "A system divided into client (frontend, requester of services) and server (backend, provider of services) layers that communicate over a network." },
        { "q": "What is microservices architecture?", "a": "An application composed of small, independent, and loosely coupled services that are developed, deployed, and scaled independently." },
        { "q": "What is SOA (Service-Oriented Architecture)?", "a": "An architecture where software components provide services to other components through a network using standard communication protocols." },
        { "q": "What is MVC architecture?", "a": "Model–View–Controller is a pattern that separates an application into three interconnected parts: Model (data and business logic), View (UI), and Controller (handles user input)." },
        { "q": "What is software documentation?", "a": "A comprehensive written text that explains the requirements, design, implementation, testing, and usage of a software product." },
        { "q": "What is configuration management?", "a": "The process of tracking and controlling all changes to the software's components to maintain consistency and integrity." },
        { "q": "What is version control?", "a": "A system (like Git) that records changes to files over time, allowing you to manage multiple versions of code and revert to previous versions." },
        { "q": "What is a baseline in software configuration?", "a": "A formally approved version of a document or software product that serves as a fixed reference point for future development." },
        { "q": "What is software testing?", "a": "The process of evaluating and verifying that a software product or application does what it’s supposed to do, ensuring it is free from defects." },
        { "q": "What are the levels of testing?", "a": "<ul><li>Unit Testing</li><li>Integration Testing</li><li>System Testing</li><li>Acceptance Testing</li></ul>" },
        { "q": "What is black-box testing?", "a": "Testing the functionality of an application without knowing its internal code structure. Only inputs and outputs are tested." },
        { "q": "What is white-box testing?", "a": "Testing the internal logic, code paths, and structure of the software." },
        { "q": "What is unit testing?", "a": "Testing individual units or components of a software to ensure they work correctly in isolation." },
        { "q": "What is integration testing?", "a": "Testing the interaction and communication between different integrated modules." },
        { "q": "What is system testing?", "a": "Testing the complete and fully integrated software system against its requirements." },
        { "q": "What is regression testing?", "a": "Re-running previously executed test cases to ensure that new code changes haven’t introduced new bugs or broken existing functionality." },
        { "q": "What is alpha and beta testing?", "a": "<ul><li><strong>Alpha Testing:</strong> Done internally by the development or QA team in a controlled environment.</li><li><strong>Beta Testing:</strong> Done by a limited number of end-users in a real-world environment before the final release.</li></ul>" },
        { "q": "What is a test case?", "a": "A document that describes the input, execution conditions, and expected output for a single test scenario." },
        { "q": "What is a test plan?", "a": "A detailed document outlining the testing strategy, scope, schedule, resources, and objectives." },
        { "q": "What is load testing?", "a": "Testing how a system performs under an expected, specific load." },
        { "q": "What is stress testing?", "a": "Testing a system's behavior and robustness under extreme or unexpected load conditions, beyond its normal capacity." },
        { "q": "What is performance testing?", "a": "A general term for testing that ensures software meets speed, scalability, and stability criteria under workload." },
        { "q": "What is usability testing?", "a": "Evaluates how user-friendly, intuitive, and easy to use the software's interface is." },
        { "q": "What is the defect life cycle?", "a": "The sequence of stages a defect or bug goes through, from its initial discovery to its final resolution (e.g., New → Assigned → Open → Fixed → Retest → Verified → Closed)." },
        { "q": "What is bug severity vs priority?", "a": "<ul><li><strong>Severity:</strong> The impact of the bug on the system's functionality.</li><li><strong>Priority:</strong> The urgency of fixing the bug.</li></ul>" },
        { "q": "What is code review?", "a": "A manual inspection of source code by developers other than the author to identify defects, improve code quality, and share knowledge." },
        { "q": "What is static testing?", "a": "Reviewing code, design documents, or requirements without executing the software." },
        { "q": "What is dynamic testing?", "a": "Testing the software by executing its code with a given set of inputs and observing the outputs." },
        { "q": "What are some testing tools?", "a": "Examples include Selenium, JUnit, Postman, LoadRunner, and TestNG." },
        { "q": "What is test automation?", "a": "The practice of using software tools to execute test cases automatically, compare actual outcomes to predicted outcomes, and generate test reports." },
        { "q": "What is Continuous Integration (CI)?", "a": "The practice of frequently merging all developers' code changes into a central repository, after which automated builds and tests are run (e.g., using Jenkins)." },
        { "q": "What is Continuous Deployment (CD)?", "a": "The practice of automatically releasing every code change that passes the CI/testing phase to a production environment." },
        { "q": "What is software maintenance?", "a": "The process of modifying a software product after its delivery to correct faults, improve performance, or adapt it to a changed environment." },
        { "q": "What are the types of maintenance?", "a": "<ul><li><strong>Corrective:</strong> Fixing bugs.</li><li><strong>Adaptive:</strong> Adapting software to new environments.</li><li><strong>Perfective:</strong> Adding new features or improving performance.</li><li><strong>Preventive:</strong> Improving maintainability to prevent future problems.</li></ul>" },
        { "q": "What is software evolution?", "a": "The gradual process of adapting and improving software over time to meet changing user needs and technological advancements." },
        { "q": "What is risk management?", "a": "The process of identifying, analyzing, and mitigating potential risks that could negatively impact a project." },
        { "q": "What are some software risks?", "a": "Technical risks, schedule risks, cost risks, and operational risks." },
        { "q": "What is software estimation?", "a": "The process of predicting the time, cost, and resources needed to complete a software project." },
        { "q": "What are some estimation techniques?", "a": "Lines of Code (LOC), Function Point Analysis, and the COCOMO model." },
        { "q": "What is the COCOMO model?", "a": "The Constructive Cost Model is an algorithmic model used to estimate software development effort, time, and cost based on the size of the software (in lines of code)." },
        { "q": "What is software project management?", "a": "The process of planning, organizing, leading, and controlling software projects to achieve specific goals." },
        { "q": "What are the main project management activities?", "a": "<ul><li>Project planning</li><li>Scheduling</li><li>Resource allocation</li><li>Risk management</li><li>Quality assurance</li></ul>" },
        { "q": "What is software quality assurance (SQA)?", "a": "A set of planned and systematic processes that ensure software products meet established quality standards." },
        { "q": "What is a software audit?", "a": "An independent evaluation of software products or development processes to assess compliance with specifications, standards, and procedures." },
        { "q": "What is a software reliability model?", "a": "Predicts failure behavior using statistical models like Jelinski-Moranda." },
        { "q": "What is change control?", "a": "A formal process for managing how modifications are introduced to a software project's requirements or configuration." },
        { "q": "What is a software validation plan?", "a": "Outlines how the software will be validated against user needs." },
        { "q": "What is reverse engineering?", "a": "The process of analyzing a software system to identify its components and their interrelationships and to create representations of the system in another form or at a higher level of abstraction." },
        { "q": "What is re-engineering?", "a": "The process of examining and altering an existing software system to improve its quality, performance, or maintainability." },
        { "q": "What is DevOps?", "a": "A culture and set of practices that combines software development (Dev) and IT operations (Ops) to shorten the development life cycle and provide continuous delivery with high software quality." },
        { "q": "What are DevOps tools?", "a": "Jenkins, Docker, Kubernetes, Git, Ansible, Terraform." },
        { "q": "What is software security engineering?", "a": "Integrating security principles throughout the software development life cycle." },
        { "q": "What is scalability in software?", "a": "The ability of a software system to handle an increased load or number of users without a significant drop in performance." },
        { "q": "What is maintainability index?", "a": "A metric that measures the ease of code maintenance using factors like LOC and complexity." },
        { "q": "What is software validation vs verification (revised)?", "a": "Validation → checks against customer needs; Verification → checks against specification compliance." },
        { "q": "What is software ethics?", "a": "Moral principles guiding software engineers — privacy, honesty, and fairness." },
        { "q": "What is the ISO 9126 / ISO 25010 standard?", "a": "International standards that define a set of software quality attributes, including functionality, reliability, usability, efficiency, maintainability, and portability." }
    ],
     "DBMS": [
        { "q": "What is a DBMS?", "a": "A Database Management System (DBMS) is software used to store, retrieve, and manage data efficiently in databases." },
        { "q": "What is a database?", "a": "A structured collection of data stored and accessed electronically." },
        { "q": "What are the advantages of DBMS over file system?", "a": "<ul><li>Data redundancy control</li><li>Data consistency</li><li>Security and privacy</li><li>Backup and recovery</li><li>Data sharing and concurrency control</li></ul>" },
        { "q": "What is data redundancy?", "a": "Unnecessary duplication of data in multiple places." },
        { "q": "What are the components of DBMS?", "a": "<ul><li>Hardware</li><li>Software</li><li>Data</li><li>Users</li><li>Procedures</li></ul>" },
        { "q": "Who are the types of database users?", "a": "<ul><li>Database Administrator (DBA)</li><li>Application Programmer</li><li>End Users</li><li>System Analyst</li></ul>" },
        { "q": "What is the role of a DBA?", "a": "DBA manages the database structure, user access, backup, recovery, and performance tuning." },
        { "q": "What are the types of DBMS?", "a": "<ul><li>Hierarchical</li><li>Network</li><li>Relational (RDBMS)</li><li>Object-oriented</li></ul>" },
        { "q": "What is RDBMS?", "a": "Relational Database Management System stores data in tables (relations) with rows (tuples) and columns (attributes). Example: MySQL, Oracle, PostgreSQL" },
        { "q": "What is a table in DBMS?", "a": "A collection of rows and columns representing related data." },
        { "q": "What is a tuple?", "a": "A row in a table representing a single record." },
        { "q": "What is an attribute?", "a": "A column in a table that defines a data field." },
        { "q": "What is a primary key?", "a": "A unique identifier for each record in a table. Example: `student_id` in Student table." },
        { "q": "What is a foreign key?", "a": "A field that creates a link between two tables — it refers to the primary key of another table." },
        { "q": "What is a candidate key?", "a": "All possible attributes that can uniquely identify a record. Example: `RollNo`, `AadhaarNo` — both unique." },
        { "q": "What is a super key?", "a": "A set of attributes that uniquely identify tuples (can contain extra attributes too)." },
        { "q": "What is a composite key?", "a": "A key made of two or more attributes that together uniquely identify a record." },
        { "q": "What is a surrogate key?", "a": "A system-generated unique key, often numeric (e.g., auto-increment ID)." },
        { "q": "What is a schema?", "a": "The overall structure of the database — defines tables, relationships, and constraints." },
        { "q": "What is an instance in DBMS?", "a": "A snapshot of the database at a particular moment in time." },
        { "q": "What is a data model?", "a": "A conceptual framework that describes how data is structured and related. Types: Hierarchical, Network, Relational, ER." },
        { "q": "What is an ER diagram?", "a": "(Entity–Relationship Diagram) — visual representation of entities, relationships, and attributes." },
        { "q": "What is cardinality in ER model?", "a": "Specifies the number of relationship instances between entities (1:1, 1:N, N:M)." },
        { "q": "What is the difference between logical and physical schema?", "a": "<ul><li><strong>Logical schema:</strong> How data is logically organized.</li><li><strong>Physical schema:</strong> How data is physically stored on disk.</li></ul>" },
        { "q": "What is data abstraction?", "a": "Hiding complex implementation details — three levels: Physical, Logical, View" },
        { "q": "What is SQL?", "a": "Structured Query Language (SQL) is used to store, manipulate, and retrieve data from relational databases." },
        { "q": "What are the types of SQL commands?", "a": "<ul><li>DDL (Data Definition Language): CREATE, ALTER, DROP</li><li>DML (Data Manipulation Language): INSERT, UPDATE, DELETE</li><li>DCL (Data Control Language): GRANT, REVOKE</li><li>TCL (Transaction Control Language): COMMIT, ROLLBACK, SAVEPOINT</li></ul>" },
        { "q": "What does the SELECT statement do?", "a": "Used to retrieve data from one or more tables. <pre><code>SELECT name, age FROM Students;</code></pre>" },
        { "q": "Difference between DELETE, TRUNCATE, and DROP?", "a": "<table class='custom-table'><thead><tr><th>Command</th><th>Action</th><th>Rollback</th><th>Table Exists</th></tr></thead><tbody><tr><td>DELETE</td><td>Removes rows</td><td>Yes</td><td>Yes</td></tr><tr><td>TRUNCATE</td><td>Removes all rows</td><td>No</td><td>Yes</td></tr><tr><td>DROP</td><td>Removes table</td><td>No</td><td>No</td></tr></tbody></table>" },
        { "q": "What is the difference between CHAR and VARCHAR?", "a": "<ul><li><strong>CHAR(n):</strong> Fixed length</li><li><strong>VARCHAR(n):</strong> Variable length</li></ul>" },
        { "q": "What is a constraint?", "a": "Rules applied to columns for data integrity (e.g., PRIMARY KEY, NOT NULL, UNIQUE, FOREIGN KEY, CHECK)." },
        { "q": "What is normalization?", "a": "Process of organizing data to reduce redundancy and improve integrity." },
        { "q": "What is denormalization?", "a": "Combining tables to improve query performance at the cost of redundancy." },
        { "q": "Explain different normal forms.", "a": "<ul><li><strong>1NF:</strong> Atomic values only</li><li><strong>2NF:</strong> 1NF + No partial dependency</li><li><strong>3NF:</strong> 2NF + No transitive dependency</li><li><strong>BCNF:</strong> Stronger version of 3NF</li></ul>" },
        { "q": "What is a view in SQL?", "a": "A virtual table created from a query result. <pre><code>CREATE VIEW student_view AS SELECT name, marks FROM Students;</code></pre>" },
        { "q": "What are indexes?", "a": "Database objects used to speed up data retrieval. <pre><code>CREATE INDEX idx_name ON Students(name);</code></pre>" },
        { "q": "What are aggregate functions?", "a": "Functions that perform calculations on multiple rows: COUNT(), AVG(), SUM(), MAX(), MIN()" },
        { "q": "What are scalar functions?", "a": "Return a single value: LENGTH(), UPPER(), LOWER(), NOW()" },
        { "q": "What is a join?", "a": "Combines rows from two or more tables based on a related column." },
        { "q": "Types of joins in SQL?", "a": "INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL OUTER JOIN, CROSS JOIN" },
        { "q": "Example of INNER JOIN:", "a": "<pre><code>SELECT Students.name, Courses.course_name\\nFROM Students\\nINNER JOIN Courses ON Students.course_id = Courses.id;</code></pre>" },
        { "q": "What is a subquery?", "a": "A query inside another query. <pre><code>SELECT name FROM Students WHERE marks > (SELECT AVG(marks) FROM Students);</code></pre>" },
        { "q": "What is a correlated subquery?", "a": "A subquery that depends on the outer query." },
        { "q": "What is a trigger?", "a": "A procedure that automatically executes when an event (INSERT, UPDATE, DELETE) occurs. <pre><code>CREATE TRIGGER trg AFTER INSERT ON Students FOR EACH ROW ...</code></pre>" },
        { "q": "What is a stored procedure?", "a": "A precompiled collection of SQL statements stored in the database. <pre><code>CREATE PROCEDURE GetStudents AS SELECT * FROM Students;</code></pre>" },
        { "q": "What is a cursor?", "a": "A pointer that allows row-by-row processing of query results." },
        { "q": "What is the difference between HAVING and WHERE?", "a": "<ul><li><strong>WHERE</strong> filters rows before aggregation.</li><li><strong>HAVING</strong> filters rows after aggregation.</li></ul>" },
        { "q": "What is a transaction?", "a": "A logical unit of work executed entirely or not at all." },
        { "q": "What are ACID properties?", "a": "<ul><li><strong>Atomicity:</strong> All or nothing</li><li><strong>Consistency:</strong> Maintain valid state</li><li><strong>Isolation:</strong> Transactions don’t interfere</li><li><strong>Durability:</strong> Changes persist after commit</li></ul>" },
        { "q": "What is a savepoint?", "a": "Used to rollback part of a transaction. <pre><code>SAVEPOINT sp1;\\nROLLBACK TO sp1;</code></pre>" },
        { "q": "What is concurrency control?", "a": "Mechanism to ensure multiple users can access data simultaneously without conflict." },
        { "q": "What are concurrency problems?", "a": "Lost update, Dirty read, Non-repeatable read, Phantom read" },
        { "q": "What are locking mechanisms?", "a": "Shared Lock (Read), Exclusive Lock (Write)" },
        { "q": "What is deadlock?", "a": "A situation where two transactions wait for each other’s resources indefinitely." },
        { "q": "How to prevent deadlocks?", "a": "Timeout, Resource ordering, Deadlock detection and recovery" },
        { "q": "What is indexing and why is it used?", "a": "Used to improve search speed by maintaining a separate data structure (B-tree, hash index)." },
        { "q": "What is a B-tree index?", "a": "A balanced tree structure used by databases for fast search and retrieval." },
        { "q": "What is hashing in DBMS?", "a": "Technique to map data to a fixed-size address using a hash function." },
        { "q": "What is data independence?", "a": "Ability to modify schema at one level without affecting other levels." },
        { "q": "What is logical and physical data independence?", "a": "<ul><li><strong>Logical:</strong> Change in logical schema doesn’t affect views.</li><li><strong>Physical:</strong> Change in physical storage doesn’t affect logical schema.</li></ul>" },
        { "q": "What is data integrity?", "a": "Ensuring accuracy and consistency of data using constraints." },
        { "q": "What is referential integrity?", "a": "Foreign keys ensure that a referenced record exists in the parent table." },
        { "q": "What is a normalization anomaly?", "a": "Issues like insertion, deletion, and update anomalies that occur in unnormalized tables." },
        { "q": "What is a distributed database?", "a": "A database stored across multiple sites connected by a network." },
        { "q": "What is data replication?", "a": "Copying data between distributed databases for availability and fault tolerance." },
        { "q": "What is data fragmentation?", "a": "Dividing a database into smaller pieces (fragments) for efficiency." },
        { "q": "What is OLTP vs OLAP?", "a": "<table class='custom-table'><thead><tr><th>Feature</th><th>OLTP</th><th>OLAP</th></tr></thead><tbody><tr><td>Purpose</td><td>Transactional</td><td>Analytical</td></tr><tr><td>Example</td><td>Banking</td><td>Data Warehousing</td></tr></tbody></table>" },
        { "q": "What is data warehousing?", "a": "Central repository of historical and integrated data for analysis and reporting." },
        { "q": "What is data mining?", "a": "Process of discovering patterns and knowledge from large datasets." },
        { "q": "What is NoSQL?", "a": "Non-relational database designed for unstructured and scalable data (e.g., MongoDB, Cassandra)." },
        { "q": "What are the types of NoSQL databases?", "a": "Document-based, Key-Value, Column-oriented, Graph-based" },
        { "q": "What is CAP theorem?", "a": "A distributed system can provide only two of three properties: Consistency, Availability, Partition tolerance." },
        { "q": "What is a view vs materialized view?", "a": "<ul><li><strong>View:</strong> Virtual table, computed each time.</li><li><strong>Materialized view:</strong> Stored physically for faster access.</li></ul>" },
        { "q": "What is a recursive query?", "a": "A query that refers to itself to handle hierarchical data. <pre><code>WITH RECURSIVE ... AS (...)</code></pre>" },
        { "q": "What is sharding?", "a": "Horizontal partitioning — splitting data across multiple databases to improve performance." },
        { "q": "What is a data dictionary?", "a": "Metadata repository — stores details about database structure, constraints, and schema." },
        { "q": "What is metadata?", "a": "'Data about data' — describes data structure, type, and constraints." },
        { "q": "What is 2-tier and 3-tier architecture?", "a": "<ul><li><strong>2-tier:</strong> Client ↔ Server</li><li><strong>3-tier:</strong> Client ↔ Application Server ↔ Database</li></ul>" },
        { "q": "What is database security?", "a": "Protection of data from unauthorized access or modification using authentication, encryption, and access control." },
        { "q": "What is SQL injection?", "a": "A security vulnerability where attackers inject malicious SQL statements." },
        { "q": "What are triggers used for?", "a": "Automate actions such as logging, validation, or auditing changes." },
        { "q": "What is cursor-based processing?", "a": "Row-by-row handling of query results (less efficient than set-based processing)." },
        { "q": "What is checkpointing?", "a": "Saving the current database state to enable recovery in case of failure." },
        { "q": "What is recovery in DBMS?", "a": "Restoring the database to a consistent state after a crash." },
        { "q": "What are recovery techniques?", "a": "Deferred Update, Immediate Update, Shadow Paging" },
        { "q": "What is a log-based recovery system?", "a": "Uses transaction logs to undo or redo operations after failure." },
        { "q": "What is RAID in DBMS?", "a": "Redundant Array of Independent Disks — improves performance and reliability via disk mirroring or striping." },
        { "q": "What is a checkpoint in transaction management?", "a": "A point of consistency from where recovery can start after failure." },
        { "q": "What is a concurrency anomaly?", "a": "When multiple transactions execute concurrently leading to inconsistent data." },
        { "q": "What is a phantom read?", "a": "When new rows appear in a result set during re-execution of a query within the same transaction." },
        { "q": "What are isolation levels?", "a": "Read Uncommitted, Read Committed, Repeatable Read, Serializable" },
        { "q": "What is shadow paging?", "a": "Maintains two copies of database pages — one current, one shadow (for recovery)." },
        { "q": "What is database tuning?", "a": "Optimizing query performance and resource utilization." },
        { "q": "What are database utilities?", "a": "Tools for backup, restore, reorganization, and performance monitoring." },
        { "q": "What is a checkpoint record in logs?", "a": "A record marking the point after which transactions must be redone or undone during recovery." },
        { "q": "What is a transaction schedule?", "a": "The sequence in which multiple transactions execute their operations." },
        { "q": "What is serializability?", "a": "Ensures concurrent transactions produce the same result as if executed sequentially." },
        { "q": "What are time-stamp ordering protocols?", "a": "Concurrency control using timestamps to maintain the order of transaction execution." },
        { "q": "What is two-phase commit protocol (2PC)?", "a": "Ensures atomicity in distributed databases by using a commit and acknowledgment phase." },
        { "q": "What is ACID vs BASE?", "a": "<table class='custom-table'><thead><tr><th>Concept</th><th>ACID</th><th>BASE</th></tr></thead><tbody><tr><td>Used in</td><td>RDBMS</td><td>NoSQL</td></tr><tr><td>Nature</td><td>Strict consistency</td><td>Eventual consistency</td></tr></tbody></table>" }
    ],
      "CN": [
        { "q": "What is a Computer Network?", "a": "A computer network is a collection of interconnected devices that communicate and share resources using communication channels." },
        { "q": "What are the advantages of computer networks?", "a": "<ul><li>Resource sharing</li><li>Data sharing</li><li>Communication</li><li>Scalability</li><li>Reliability</li></ul>" },
        { "q": "What are the types of networks?", "a": "<ul><li>PAN (Personal Area Network)</li><li>LAN (Local Area Network)</li><li>MAN (Metropolitan Area Network)</li><li>WAN (Wide Area Network)</li><li>WLAN (Wireless LAN)</li></ul>" },
        { "q": "What is topology?", "a": "The physical or logical arrangement of network devices and cables." },
        { "q": "Types of network topologies?", "a": "<ul><li>Bus</li><li>Star</li><li>Ring</li><li>Mesh</li><li>Tree</li><li>Hybrid</li></ul>" },
        { "q": "What are network protocols?", "a": "A set of rules that define how data is transmitted and received in a network. Examples: HTTP, FTP, TCP/IP, SMTP, DNS." },
        { "q": "What is the difference between a hub, switch, and router?", "a": "<table class='custom-table'><thead><tr><th>Device</th><th>Layer</th><th>Function</th></tr></thead><tbody><tr><td>Hub</td><td>Physical</td><td>Broadcasts data to all ports</td></tr><tr><td>Switch</td><td>Data Link</td><td>Forwards data based on MAC address</td></tr><tr><td>Router</td><td>Network</td><td>Routes data between networks using IP addresses</td></tr></tbody></table>" },
        { "q": "What is bandwidth?", "a": "It’s the maximum data transfer rate of a network connection, measured in bits per second (bps)." },
        { "q": "What is latency?", "a": "Time delay between the transmission and reception of data." },
        { "q": "What is throughput?", "a": "The actual rate of successful message delivery over a network." },
        { "q": "What is a node?", "a": "Any device connected to a network (computer, router, switch, etc.)." },
        { "q": "What is a MAC address?", "a": "A unique 48-bit hardware address assigned to a network interface card (NIC)." },
        { "q": "What is an IP address?", "a": "A logical address used to identify a device on a network. Example: IPv4 (32-bit), IPv6 (128-bit)." },
        { "q": "What is subnetting?", "a": "Dividing a large network into smaller, manageable sub-networks for efficient IP management." },
        { "q": "What is DNS?", "a": "Domain Name System translates domain names (like google.com) into IP addresses." },
        { "q": "What is DHCP?", "a": "Dynamic Host Configuration Protocol automatically assigns IP addresses to network devices." },
        { "q": "What is the difference between static and dynamic IP?", "a": "<ul><li><strong>Static:</strong> Manually assigned, fixed IP.</li><li><strong>Dynamic:</strong> Automatically assigned by DHCP.</li></ul>" },
        { "q": "What is a gateway?", "a": "A device that connects different networks using different protocols." },
        { "q": "What is a modem?", "a": "A device that modulates and demodulates digital and analog signals for internet communication." },
        { "q": "What is the difference between unicast, multicast, and broadcast?", "a": "<table class='custom-table'><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Unicast</td><td>One-to-one communication</td></tr><tr><td>Multicast</td><td>One-to-many selected nodes</td></tr><tr><td>Broadcast</td><td>One-to-all communication</td></tr></tbody></table>" },
        { "q": "What is the OSI Model?", "a": "A conceptual model with 7 layers defining communication standards between systems." },
        { "q": "Name all 7 OSI layers.", "a": "Physical, Data Link, Network, Transport, Session, Presentation, Application" },
        { "q": "What is the function of each OSI layer?", "a": "<table class='custom-table'><thead><tr><th>Layer</th><th>Function</th></tr></thead><tbody><tr><td>Physical</td><td>Transmission of raw bits</td></tr><tr><td>Data Link</td><td>Framing, MAC, error detection</td></tr><tr><td>Network</td><td>Routing, logical addressing</td></tr><tr><td>Transport</td><td>Segmentation, flow control</td></tr><tr><td>Session</td><td>Establish/manage sessions</td></tr><tr><td>Presentation</td><td>Data formatting & encryption</td></tr><tr><td>Application</td><td>Interface for user apps</td></tr></tbody></table>" },
        { "q": "What is the TCP/IP Model?", "a": "A 4-layer model: Network Interface, Internet, Transport, Application" },
        { "q": "Difference between OSI and TCP/IP models?", "a": "<table class='custom-table'><thead><tr><th>Aspect</th><th>OSI</th><th>TCP/IP</th></tr></thead><tbody><tr><td>Layers</td><td>7</td><td>4</td></tr><tr><td>Developed by</td><td>ISO</td><td>DARPA</td></tr><tr><td>Protocol dependency</td><td>Independent</td><td>Protocol-specific</td></tr></tbody></table>" },
        { "q": "What is encapsulation?", "a": "Process of adding headers and trailers around data as it moves down OSI layers." },
        { "q": "What is decapsulation?", "a": "Reverse process — removing headers/trailers as data moves upward." },
        { "q": "What is a PDU?", "a": "Protocol Data Unit — name given to data at each layer (Frame, Packet, Segment, etc.)." },
        { "q": "Which layer is responsible for routing?", "a": "Network Layer." },
        { "q": "Which layer ensures reliable data transfer?", "a": "Transport Layer." },
        { "q": "What is TCP?", "a": "Transmission Control Protocol — connection-oriented, reliable, error-checked communication." },
        { "q": "What is UDP?", "a": "User Datagram Protocol — connectionless, faster, but no guarantee of delivery." },
        { "q": "Difference between TCP and UDP?", "a": "<table class='custom-table'><thead><tr><th>Feature</th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>Connection</td><td>Oriented</td><td>Less reliable</td></tr><tr><td>Speed</td><td>Slower</td><td>Faster</td></tr><tr><td>Use case</td><td>HTTP, FTP</td><td>Video streaming, DNS</td></tr></tbody></table>" },
        { "q": "What is a socket?", "a": "Combination of IP address + port number, uniquely identifying a process on the network." },
        { "q": "What is a port number?", "a": "A 16-bit identifier used to map data to processes on a device. Example: HTTP → 80, HTTPS → 443." },
        { "q": "What is a three-way handshake in TCP?", "a": "SYN → synchronize, SYN-ACK → acknowledge, ACK → confirm connection" },
        { "q": "What is flow control in TCP?", "a": "Mechanism to prevent sender from overwhelming receiver using window size." },
        { "q": "What is congestion control?", "a": "Prevents excessive data load in the network using algorithms like AIMD." },
        { "q": "What are TCP flags?", "a": "SYN, ACK, FIN, RST, PSH, URG." },
        { "q": "What is fragmentation?", "a": "Splitting large packets into smaller ones for transmission." },
        { "q": "What is routing?", "a": "Process of selecting optimal paths for data packets to travel through a network." },
        { "q": "What is a routing table?", "a": "A database in routers containing routes and next-hop information." },
        { "q": "Types of routing?", "a": "Static Routing, Dynamic Routing" },
        { "q": "What are dynamic routing protocols?", "a": "Examples: RIP, OSPF, EIGRP, BGP." },
        { "q": "What is RIP?", "a": "Routing Information Protocol, a distance-vector protocol using hop count as a metric." },
        { "q": "What is OSPF?", "a": "Open Shortest Path First, a link-state protocol using Dijkstra’s algorithm." },
        { "q": "What is BGP?", "a": "Border Gateway Protocol, used for routing between autonomous systems on the internet." },
        { "q": "What is a switch?", "a": "A Layer 2 device that forwards frames based on MAC addresses." },
        { "q": "What is VLAN?", "a": "Virtual LAN — divides a physical network into logical segments." },
        { "q": "What is ARP?", "a": "Address Resolution Protocol — maps IP addresses to MAC addresses." },
        { "q": "What is RARP?", "a": "Reverse ARP — maps MAC address to IP." },
        { "q": "What is ICMP?", "a": "Internet Control Message Protocol — used for error reporting (e.g., ping, traceroute)." },
        { "q": "What is NAT?", "a": "Network Address Translation — translates private IPs to public IPs." },
        { "q": "What are the types of NAT?", "a": "Static NAT, Dynamic NAT, PAT (Port Address Translation)" },
        { "q": "What is a default gateway?", "a": "Router address used to send data outside the local network." },
        { "q": "What is a subnet mask?", "a": "Used to divide IP address into network and host portions." },
        { "q": "What is CIDR?", "a": "Classless Inter-Domain Routing — allows flexible subnetting (e.g., /24)." },
        { "q": "What is DNS record type A and CNAME?", "a": "<ul><li><strong>A record:</strong> Maps domain to IP.</li><li><strong>CNAME:</strong> Maps alias name to real name.</li></ul>" },
        { "q": "What is QoS?", "a": "Quality of Service — manages network traffic priority for different types of data." },
        { "q": "What is load balancing?", "a": "Distributing network or application traffic across multiple servers for performance and reliability." },
        { "q": "What is a firewall?", "a": "A security system that filters incoming and outgoing network traffic based on rules." },
        { "q": "What is a proxy server?", "a": "Acts as an intermediary between user and internet to enhance security and caching." },
        { "q": "What is a VPN?", "a": "Virtual Private Network — creates a secure encrypted tunnel over the internet." },
        { "q": "What is encryption?", "a": "Process of converting data into unreadable form using algorithms like AES, RSA." },
        { "q": "What is public-key encryption?", "a": "Uses two keys: public (for encryption) and private (for decryption)." },
        { "q": "What is SSL/TLS?", "a": "Protocols ensuring secure communication over the internet (HTTPS)." },
        { "q": "What is IPsec?", "a": "Set of protocols for securing IP communications by authenticating and encrypting packets." },
        { "q": "What is a DoS attack?", "a": "Denial of Service — attacker overwhelms server with traffic, causing unavailability." },
        { "q": "What is a DDoS attack?", "a": "Distributed DoS — multiple compromised systems attack simultaneously." },
        { "q": "What is a packet sniffer?", "a": "Tool that captures network traffic, e.g., Wireshark." },
        { "q": "What is ARP spoofing?", "a": "Attacker sends fake ARP messages to link their MAC with another IP address." },
        { "q": "What is MAC filtering?", "a": "Security method allowing only specific MAC addresses to connect to the network." },
        { "q": "What is IPv6 and its advantage?", "a": "128-bit addressing with larger address space, better security, and faster routing." },
        { "q": "What is tunneling?", "a": "Encapsulating data packets within another protocol to secure transmission." },
        { "q": "What is DNS spoofing?", "a": "Redirecting traffic to malicious sites by tampering DNS records." },
        { "q": "What is traceroute?", "a": "Tool that shows path and delay of packets across the network." },
        { "q": "What is ping?", "a": "Command using ICMP to check network connectivity." },
        { "q": "What is network latency?", "a": "The delay between request and response in a network." },
        { "q": "What is network redundancy?", "a": "Backup components or links to ensure reliability and availability." },
        { "q": "What is cloud networking?", "a": "Integration of cloud computing and networking for scalable infrastructure and virtual connectivity." },
        { "q": "What is data communication?", "a": "Exchange of data between two devices via a transmission medium like wire, fiber, or wireless." },
        { "q": "What are the components of data communication?", "a": "Sender, Receiver, Message, Medium, Protocol" },
        { "q": "What is analog and digital signal?", "a": "<ul><li><strong>Analog:</strong> Continuous waveform.</li><li><strong>Digital:</strong> Discrete binary data (0s and 1s).</li></ul>" },
        { "q": "What is baud rate?", "a": "Number of signal changes per second; measured in baud." },
        { "q": "What is bit rate?", "a": "Number of bits transmitted per second (bps)." },
        { "q": "Difference between bit rate and baud rate?", "a": "<ul><li><strong>Bit rate</strong> = data rate (bits/sec)</li><li><strong>Baud rate</strong> = signal rate (changes/sec)</li></ul>" },
        { "q": "What is bandwidth-delay product?", "a": "Represents amount of data in transit = Bandwidth × Round-trip delay time." },
        { "q": "What is attenuation?", "a": "Loss of signal strength during transmission." },
        { "q": "What is noise?", "a": "Undesired signals that distort transmitted data (thermal noise, crosstalk, impulse noise)." },
        { "q": "What is signal-to-noise ratio (SNR)?", "a": "Ratio of signal power to noise power — higher SNR = better quality." },
        { "q": "What is multiplexing?", "a": "Technique to combine multiple signals into one transmission medium." },
        { "q": "Types of multiplexing?", "a": "FDM (Frequency Division Multiplexing), TDM (Time Division Multiplexing), WDM (Wavelength Division Multiplexing), CDM (Code Division Multiplexing)" },
        { "q": "What is demultiplexing?", "a": "Process of separating multiplexed signals at the receiver end." },
        { "q": "What is modulation?", "a": "Changing carrier signal characteristics (amplitude, frequency, phase) to encode data." },
        { "q": "Types of modulation?", "a": "AM (Amplitude), FM (Frequency), PM (Phase)" },
        { "q": "What is a transmission medium?", "a": "The physical path for data transfer — wired (copper, fiber) or wireless (radio, microwave)." },
        { "q": "What is guided and unguided transmission?", "a": "<ul><li><strong>Guided:</strong> Data travels through cables.</li><li><strong>Unguided:</strong> Data travels through air (wireless).</li></ul>" },
        { "q": "What is propagation delay?", "a": "Time taken for a signal to travel from sender to receiver." },
        { "q": "What is switching?", "a": "Process of forwarding data from one point to another through intermediate nodes." },
        { "q": "Types of switching?", "a": "Circuit switching, Packet switching, Message switching" },
        { "q": "What is circuit switching?", "a": "A dedicated communication path is established before transmission (e.g., telephone network)." },
        { "q": "What is packet switching?", "a": "Data divided into packets that travel independently across the network (used in Internet)." },
        { "q": "What is message switching?", "a": "Entire message treated as one unit and stored until route is available." },
        { "q": "What is error detection?", "a": "Technique to identify data errors during transmission." },
        { "q": "Error detection techniques?", "a": "Parity check, Checksum, CRC (Cyclic Redundancy Check)" },
        { "q": "What is error correction?", "a": "Process of detecting and correcting errors automatically using redundant data (e.g., Hamming Code)." },
        { "q": "What is flow control?", "a": "Ensures sender doesn’t overwhelm receiver (e.g., Stop-and-Wait, Sliding Window protocols)." },
        { "q": "What is Stop-and-Wait protocol?", "a": "Sender transmits one frame, waits for acknowledgment before next transmission." },
        { "q": "What is Sliding Window protocol?", "a": "Allows multiple frames in transit before acknowledgment — improves efficiency." },
        { "q": "What is ARQ?", "a": "Automatic Repeat reQuest — retransmission technique for lost/damaged frames." },
        { "q": "What is a wireless network?", "a": "A network that uses radio signals for communication instead of cables." },
        { "q": "What are the types of wireless networks?", "a": "WLAN (Wi-Fi), WPAN (Bluetooth, ZigBee), WWAN (Mobile network), WMAN (WiMAX)" },
        { "q": "What is Wi-Fi?", "a": "Wireless Fidelity — IEEE 802.11 standard for wireless LANs." },
        { "q": "What is Bluetooth?", "a": "Short-range wireless technology (IEEE 802.15) for device-to-device communication." },
        { "q": "What is 4G / 5G?", "a": "Mobile broadband standards offering high-speed internet with lower latency and higher capacity." },
        { "q": "What is a hotspot?", "a": "Public wireless access point that provides internet connectivity." },
        { "q": "What is SSID?", "a": "Service Set Identifier — name assigned to a Wi-Fi network." },
        { "q": "What is an access point (AP)?", "a": "Device that connects wireless clients to a wired network." },
        { "q": "What is ad-hoc network?", "a": "Peer-to-peer wireless network without central control or router." },
        { "q": "What is infrastructure mode?", "a": "Wireless devices communicate through an access point (AP)." },
        { "q": "What is Bluetooth pairing?", "a": "Process of authentication and encryption for secure communication between Bluetooth devices." },
        { "q": "What is WiMAX?", "a": "Worldwide Interoperability for Microwave Access — IEEE 802.16 standard for long-range broadband." },
        { "q": "What is cellular network architecture?", "a": "Divided into cells, each managed by a base station connected to a central controller." },
        { "q": "What is handoff/handover?", "a": "Process of transferring active connection from one base station to another when a user moves." },
        { "q": "What is roaming?", "a": "Ability to maintain network connectivity across different coverage areas." },
        { "q": "What is RFID?", "a": "Radio Frequency Identification — uses radio waves for object identification." },
        { "q": "What is satellite communication?", "a": "Data transmission using geostationary or low-earth orbit satellites." },
        { "q": "What is LTE?", "a": "Long Term Evolution — high-speed wireless communication standard (used in 4G)." },
        { "q": "What is bandwidth allocation?", "a": "Distributing available spectrum or bandwidth among multiple users or services." },
        { "q": "What is Wi-Fi 6?", "a": "Latest Wi-Fi standard (802.11ax) offering higher throughput, better efficiency, and low latency." },
        { "q": "What is a beacon frame?", "a": "Broadcasted by APs to announce their presence and capabilities." },
        { "q": "What is the hidden node problem?", "a": "Occurs when two stations can’t detect each other’s signals, leading to collisions." },
        { "q": "What is RTS/CTS mechanism?", "a": "Request to Send / Clear to Send — used to avoid collisions in wireless networks." },
        { "q": "What is CSMA/CA?", "a": "Carrier Sense Multiple Access with Collision Avoidance — used in Wi-Fi for medium access." },
        { "q": "What is CSMA/CD?", "a": "Collision Detection — used in Ethernet to detect and handle data collisions." },
        { "q": "Difference between CSMA/CD and CSMA/CA?", "a": "<table class='custom-table'><thead><tr><th>Feature</th><th>CSMA/CD</th><th>CSMA/CA</th></tr></thead><tbody><tr><td>Used in</td><td>Wired (Ethernet)</td><td>Wireless (Wi-Fi)</td></tr><tr><td>Action</td><td>Detects collision</td><td>Avoids collision</td></tr></tbody></table>" },
        { "q": "What is a Wi-Fi security protocol?", "a": "WEP, WPA, WPA2, WPA3 — used to encrypt wireless communication." },
        { "q": "What is wireless interference?", "a": "Disruption of signals due to other electronic devices or overlapping channels." },
        { "q": "What is channel bonding?", "a": "Combining multiple frequency channels to increase bandwidth." },
        { "q": "What is MIMO?", "a": "Multiple Input Multiple Output — uses multiple antennas for higher throughput." },
        { "q": "What are the main networking devices?", "a": "Hub, Switch, Router, Modem, Repeater, Bridge, Gateway, Firewall." },
        { "q": "What is a repeater?", "a": "Amplifies weak signals to extend network range." },
        { "q": "What is a bridge?", "a": "Connects and filters traffic between two LAN segments." },
        { "q": "What is a gateway?", "a": "Connects networks using different communication protocols." },
        { "q": "What is NIC?", "a": "Network Interface Card — hardware that enables a device to connect to a network." },
        { "q": "What is a firewall rule?", "a": "Predefined instruction that allows or blocks traffic based on IP, port, or protocol." },
        { "q": "What is port forwarding?", "a": "Redirecting network requests from one port to another — often used in routers." },
        { "q": "What is proxy caching?", "a": "Storing frequently accessed web content locally for faster access." },
        { "q": "What are common networking commands?", "a": "<code>ping</code>, <code>tracert</code>, <code>ipconfig</code>, <code>netstat</code>, <code>nslookup</code>, <code>arp</code>, <code>route</code>, <code>ifconfig</code>." },
        { "q": "What does ipconfig /all show?", "a": "Displays full IP configuration of all network adapters." },
        { "q": "What is ping used for?", "a": "Tests connectivity between two devices." },
        { "q": "What is tracert or traceroute?", "a": "Shows the path and time delay taken by packets." },
        { "q": "What does netstat do?", "a": "Displays active network connections and listening ports." },
        { "q": "What does nslookup do?", "a": "Queries DNS records for a domain name." },
        { "q": "What is arp -a?", "a": "Displays the ARP cache (IP-to-MAC address mapping)." },
        { "q": "What is loopback address?", "a": "127.0.0.1 — used to test local host connectivity." },
        { "q": "What is TTL (Time To Live)?", "a": "Field in IP packet that prevents infinite looping by limiting hop count." },
        { "q": "What is MTU (Maximum Transmission Unit)?", "a": "Largest size of a data packet that can be sent without fragmentation." },
        { "q": "What is ICMP echo request/reply?", "a": "Used in ping to check reachability between devices." },
        { "q": "What is TCP handshake teardown?", "a": "4-step termination using FIN and ACK packets." },
        { "q": "What is DHCP lease time?", "a": "Duration for which an IP is assigned to a device." },
        { "q": "What is the default subnet mask of a Class C network?", "a": "255.255.255.0" },
        { "q": "What is the Class A IP range?", "a": "1.0.0.0 – 126.255.255.255" },
        { "q": "What is the Class B IP range?", "a": "128.0.0.0 – 191.255.255.255" },
        { "q": "What is the Class C IP range?", "a": "192.0.0.0 – 223.255.255.255" },
        { "q": "What are the private IP ranges?", "a": "Class A: 10.0.0.0/8, Class B: 172.16.0.0/12, Class C: 192.168.0.0/16" },
        { "q": "What is the IPv6 loopback address?", "a": "::1" },
        { "q": "What is a dual stack?", "a": "A system that supports both IPv4 and IPv6 simultaneously." },
        { "q": "What is tunneling in IPv6?", "a": "Encapsulating IPv6 packets within IPv4 packets to ensure compatibility across IPv4 networks." },
        { "q": "What is a link-local address in IPv6?", "a": "Auto-configured IPs used for communication within local networks — they start with FE80::." },
        { "q": "What are common network troubleshooting steps?", "a": "<ul><li>Check physical connections</li><li>Verify IP configuration (<code>ipconfig</code>)</li><li>Ping the gateway to check local connectivity</li><li>Check DNS resolution (<code>nslookup</code>)</li><li>Restart the network interface or device</li></ul>" },
        { "q": "What is packet loss?", "a": "The percentage of data packets that are lost in transit and never reach their destination." },
        { "q": "What causes packet loss?", "a": "Network congestion, hardware failures, software bugs, interference, or faulty cables." },
        { "q": "What is jitter?", "a": "The variation in the delay of received packets. High jitter can degrade the quality of real-time applications like voice and video calls." },
        { "q": "What is bandwidth throttling?", "a": "The intentional slowing or speeding of an internet service by an Internet service provider (ISP) or network administrator." },
        { "q": "What is traceroute used for in troubleshooting?", "a": "It identifies the path packets take to a destination and measures the transit delays across routers, helping to pinpoint where network latency is occurring." },
        { "q": "What is ARP cache poisoning?", "a": "An attack where an attacker sends spoofed ARP messages onto a LAN to associate their MAC address with the IP address of another host, allowing them to intercept traffic." },
        { "q": "What is port scanning?", "a": "A technique used to identify open ports and services available on a network host." },
        { "q": "What is a honeypot?", "a": "A decoy computer system set up to detect, deflect, or study attempts at unauthorized use of information systems." },
        { "q": "What is two-factor authentication (2FA)?", "a": "A security mechanism that requires users to provide two different authentication factors to verify themselves, such as a password and a one-time code (OTP)." },
        { "q": "What is HTTPS?", "a": "Hypertext Transfer Protocol Secure (HTTPS) is an extension of HTTP that uses SSL/TLS to encrypt communication between a client and a server, ensuring data privacy and integrity." },
        { "q": "What is an SSL handshake?", "a": "The process through which a client and server establish a secure, encrypted connection using SSL/TLS. It involves exchanging 'hello' messages, sharing cryptographic keys, and verifying certificates." },
        { "q": "What is a digital certificate?", "a": "An electronic document issued by a Certificate Authority (CA) that uses a digital signature to bind a public key with an identity, verifying the authenticity of a website or server." },
        { "q": "What is hashing?", "a": "The process of converting input data of any size into a fixed-length, unique string of characters using algorithms like SHA-256 or MD5. It's a one-way process." },
        { "q": "What is a network sniffer?", "a": "A tool (like Wireshark) that captures and analyzes packets traversing a network, used for network troubleshooting or monitoring." },
        { "q": "What is a brute-force attack?", "a": "A trial-and-error method used to obtain information such as a user password by trying numerous combinations of characters." },
        { "q": "What is network segmentation?", "a": "The practice of dividing a computer network into smaller, isolated subnetworks to improve performance and security by limiting access." },
        { "q": "What is a DMZ (Demilitarized Zone)?", "a": "An isolated perimeter network that separates an organization's internal network from the external, untrusted internet. It's where external-facing servers (like web servers) are placed for an extra layer of security." },
        { "q": "What is IDS/IPS?", "a": "<ul><li><strong>IDS (Intrusion Detection System):</strong> Monitors network traffic for suspicious activity and issues alerts.</li><li><strong>IPS (Intrusion Prevention System):</strong> Actively blocks or prevents detected intrusions.</li></ul>" },
        { "q": "What is SSL certificate pinning?", "a": "A security mechanism that associates a host with its expected SSL certificate to prevent Man-in-the-Middle (MITM) attacks using fraudulent certificates." },
        { "q": "What are VPN tunneling protocols?", "a": "Examples include PPTP, L2TP/IPSec, OpenVPN, and IKEv2." },
        { "q": "What is phishing?", "a": "A fraudulent attempt to obtain sensitive information such as usernames, passwords, and credit card details by disguising as a trustworthy entity in an electronic communication." },
        { "q": "What is network forensics?", "a": "The process of capturing, recording, and analyzing network traffic to investigate security incidents or cybercrimes." },
        { "q": "What is a load balancer?", "a": "A device or software that distributes network or application traffic across a number of servers to improve responsiveness and availability." },
        { "q": "What is redundancy in network design?", "a": "The duplication of critical components or functions of a system (like backup paths or devices) with the intention of increasing reliability and availability." },
        { "q": "What is fault tolerance?", "a": "The ability of a system to continue operating without interruption when one or more of its components fail." },
        { "q": "What is a disaster recovery plan (DRP)?", "a": "A documented, structured approach with instructions for responding to unplanned incidents that threaten an IT infrastructure, including hardware, software, networks, and data." },
        { "q": "What is SDN (Software-Defined Networking)?", "a": "An architecture that separates the network's control plane (decision-making) from the data plane (forwarding), allowing for centralized and automated network management." },
        { "q": "What is NFV (Network Function Virtualization)?", "a": "The concept of replacing dedicated hardware network devices (like routers and firewalls) with virtualized software equivalents that run on standard servers." },
        { "q": "What is edge computing?", "a": "A distributed computing paradigm that brings computation and data storage closer to the sources of data (like IoT devices and sensors) to reduce latency and save bandwidth." }
    ]
};

